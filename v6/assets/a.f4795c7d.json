{"title":"@casl/ability/extra API","categories":["api"],"order":15,"meta":{"keywords":null,"description":null},"content":"<h2 id=\"rules-to-query\"><a name=\"rules-to-query\" class=\"h-link\" href=\"#\"></a>rulesToQuery</h2>\n<p>This is a helper iterator function that allows to aggregate conditions from permissions into a database query.</p>\n<ul>\n<li><strong>Parameters</strong>:\n<ul>\n<li><code>ability: TAbility</code></li>\n<li><code>action: string</code></li>\n<li><code>subjectType: SubjectType</code></li>\n<li><code>convert: (rule: RuleOf&lt;TAbility&gt;) =&gt; object</code></li>\n</ul>\n</li>\n<li><strong>Returns</strong> <code>null</code> if user is not allowed to run specified <code>action</code> on specified <code>subjectType</code>, otherwise returns an object of optional <code>$and</code> and <code>$or</code> fields. <code>$and</code> contains results of transformation from inverted rules and <code>$or</code> contains results of direct rules.</li>\n<li><strong>See also</strong>: <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/ability-to-database-query&quot;}\">Ability to database query</app-link>, <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;package/casl-mongoose&quot;}\" hash=\"accessible-records-plugin\">@casl/mongoose</app-link></li>\n</ul>\n<h2 id=\"rules-to-ast\"><a name=\"rules-to-ast\" class=\"h-link\" href=\"#\"></a>rulesToAST</h2>\n<p>This function converts rules into <a href=\"https://github.com/stalniy/ucast\" target=\"_blank\" rel=\"noopener nofollow\">ucast</a> AST.</p>\n<ul>\n<li><strong>Parameters</strong>:\n<ul>\n<li><code>ability: TAbility</code></li>\n<li><code>action: string</code></li>\n<li><code>subjectType: SubjectType</code></li>\n</ul>\n</li>\n<li><strong>Returns</strong> <code>null</code> if user is not allowed to run specified <code>action</code> on specified <code>subjectType</code>, otherwise returns AST.</li>\n</ul>\n<h2 id=\"rules-to-fields\"><a name=\"rules-to-fields\" class=\"h-link\" href=\"#\"></a>rulesToFields</h2>\n<p>This is a helper function that allows to extract field values from <code>PureAbility</code> conditions. This may be useful to extract default values from permissions for a new object.</p>\n<ul>\n<li>\n<p><strong>Parameters</strong>:</p>\n<ul>\n<li><code>ability: TAbility</code></li>\n<li><code>action: string</code></li>\n<li><code>subjectType: SubjectType</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Returns</strong> an object with values from conditions.</p>\n</li>\n<li>\n<p><strong>Usage</strong><br>\nThis function processes values of conditions that are not objects. Makes sure to call <code>ability.can</code> on resulting object:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { rulesToFields } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability/extra&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">authorId</span>: <span class=\"hljs-number\">1</span> });\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">public</span>: <span class=\"hljs-literal\">true</span> });\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">title</span>: { <span class=\"hljs-attr\">$regex</span>: <span class=\"hljs-regexp\">/^\\[Draft\\]/i</span> } });\n});\n\n<span class=\"hljs-keyword\">const</span> defaultValues = rulesToFields(ability, <span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>);\n<span class=\"hljs-built_in\">console</span>.log(defaultValues); <span class=\"hljs-comment\">// { public: true, authorId: 1 }</span>\n\n<span class=\"hljs-keyword\">const</span> newArticle = {\n  ...defaultValues,\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;...&#x27;</span>,\n  <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;...&#x27;</span>\n};\n</code></pre>\n</li>\n</ul>\n<h2 id=\"permitted-fields-of\"><a name=\"permitted-fields-of\" class=\"h-link\" href=\"#\"></a>permittedFieldsOf</h2>\n<p>This function returns fields of <code>subject</code> which specified <code>action</code> may be applied on. Accepts single generic parameter <code>TAbility</code> (<code>T</code> to be short).</p>\n<ul>\n<li>\n<p><strong>Parameters</strong></p>\n<ul>\n<li><code>ability: T</code></li>\n<li><code>action: string</code></li>\n<li><code>subject: Subject</code></li>\n<li><code>options: PermittedFieldsOptions&lt;T&gt;</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Returns</strong> an array of fields</p>\n</li>\n<li>\n<p><strong>Usage</strong><br>\nThis function is especially useful for backend API because it allows to filter out disallowed properties from request body (e.g., in <a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"noopener nofollow\">expressjs</a> middleware)</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { permittedFieldsOf } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability/extra&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { pick, isEmpty } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;lodash&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>);\n  can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, [<span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;description&#x27;</span>]);\n});\n\napp.patch(<span class=\"hljs-string\">&#x27;/api/articles/:id&#x27;</span>, <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n  <span class=\"hljs-keyword\">const</span> updatableFields = permittedFieldsOf(ability, <span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, {\n    <span class=\"hljs-attr\">fieldsFrom</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">rule</span> =&gt;</span> rule.fields || [<span class=\"hljs-comment\">/* list of all fields for Article */</span>]\n  });\n  <span class=\"hljs-keyword\">const</span> changes = pick(req.body, updatableFields);\n\n  <span class=\"hljs-keyword\">if</span> (isEmpty(changes)) {\n    res.status(<span class=\"hljs-number\">400</span>).send({ <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;Nothing to update&#x27;</span> });\n    <span class=\"hljs-keyword\">return</span>;\n  }\n\n  <span class=\"hljs-keyword\">await</span> updateArticleById(id, changes);\n});\n</code></pre>\n<p>So, now even if user try to send fields that he is not allowed to update, <code>permittedFieldsOf</code> will filter them out!</p>\n</li>\n<li>\n<p><strong>See also</strong>: <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/restricting-fields&quot;}\">Restricting fields access</app-link>, <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;package/casl-mongoose&quot;}\" hash=\"accessible-fields-plugin\">@casl/mongoose</app-link></p>\n</li>\n</ul>\n<h2 id=\"pack-rules\"><a name=\"pack-rules\" class=\"h-link\" href=\"#\"></a>packRules</h2>\n<p>This function <strong>reduces serialized rules size in 2 times</strong> (in comparison to its raw representation), by converting objects to arrays. This is useful if you plan to cache rules in <a href=\"https://en.wikipedia.org/wiki/JSON_Web_Token\" target=\"_blank\" rel=\"noopener nofollow\">JWT</a> token.</p>\n<blockquote>\n<p>Donâ€™t use result returned by packRules directly, its format is not public and may change in future versions.</p>\n</blockquote>\n<ul>\n<li>\n<p><strong>Parameters</strong>:</p>\n<ul>\n<li><code>rules: TRawRule[]</code></li>\n<li><code>packSubject?: (subjectType: SubjectType) =&gt; string</code> - we need to pass this parameter only if we use classes as subject types. It should return subject type's string representation.</li>\n</ul>\n</li>\n<li>\n<p><strong>Returns</strong> <code>PackRule&lt;TRawRule&gt;[]</code></p>\n</li>\n<li>\n<p><strong>Usage</strong></p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { packRules } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability/extra&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> jwt <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;jsonwebtoken&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { defineRulesFor } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../services/appAbility&#x27;</span>;\n\napp.post(<span class=\"hljs-string\">&#x27;/session&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> token = jwt.sign({\n    <span class=\"hljs-attr\">id</span>: req.user.id,\n    <span class=\"hljs-attr\">rules</span>: packRules(defineRulesFor(req.user))\n  }, <span class=\"hljs-string\">&#x27;jwt secret&#x27;</span>, { <span class=\"hljs-attr\">expiresIn</span>: <span class=\"hljs-string\">&#x27;1d&#x27;</span> });\n\n  res.send({ token });\n});\n</code></pre>\n</li>\n<li>\n<p><strong>See also</strong>: <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;cookbook/cache-rules&quot;}\">Cache abilities</app-link>, <a href=\"#unpack-rules\"><code>unpackRules</code></a></p>\n</li>\n</ul>\n<h2 id=\"unpack-rules\"><a name=\"unpack-rules\" class=\"h-link\" href=\"#\"></a>unpackRules</h2>\n<p>This function unpacks rules previously packed by <a href=\"#pack-rules\"><code>packRules</code></a>, so they can be consumed by <code>PureAbility</code> instance.</p>\n<ul>\n<li>\n<p><strong>Parameters</strong>:</p>\n<ul>\n<li><code>rules: PackRule&lt;TRawRule&gt;[]</code></li>\n<li><code>unpackSubject?: (type: string) =&gt; SubjectType</code> - we need to pass this parameter only if we use classes as subject types. It should return subject type out of its string representation.</li>\n</ul>\n</li>\n<li>\n<p><strong>Returns</strong> <code>TRawRule[]</code></p>\n</li>\n<li>\n<p><strong>Usage</strong><br>\nIf backend sends packed rules, we need to use <code>unpackRules</code> before passing them into <code>PureAbility</code> instance:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { unpackRules } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability/extra&#x27;</span>\n<span class=\"hljs-keyword\">import</span> jwt <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;jsonwebtoken&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ability <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../services/appAbility&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoginComponent</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">login</span>(<span class=\"hljs-params\">params</span>)</span> {\n    <span class=\"hljs-keyword\">return</span> http.post(<span class=\"hljs-string\">&#x27;/session&#x27;</span>)\n      .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">response</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> token = jwt.decode(response.token);\n        ability.update(unpackRules(token.rules))\n      });\n  }\n}\n</code></pre>\n</li>\n<li>\n<p><strong>See also</strong>: <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;cookbook/cache-rules&quot;}\">Cache abilities</app-link>, <a href=\"#pack-rules\"><code>packRules</code></a></p>\n</li>\n</ul>","headings":[{"id":"rules-to-query","title":"rulesToQuery"},{"id":"rules-to-ast","title":"rulesToAST"},{"id":"rules-to-fields","title":"rulesToFields"},{"id":"permitted-fields-of","title":"permittedFieldsOf"},{"id":"pack-rules","title":"packRules"},{"id":"unpack-rules","title":"unpackRules"}],"id":"api/casl-ability-extra"}