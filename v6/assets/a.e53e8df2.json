{"title":"Debugging and testing","categories":["advanced"],"order":70,"meta":{"keywords":null,"description":null},"content":"<p>Sometimes it may be a bit complicated to understand why some action in the app is forbidden for a particular user. In this guide, you will learn common pitfalls and ways to investigate the underlying reasons. Let's start.</p>\n<h2 id=\"debugging\"><a name=\"debugging\" class=\"h-link\" href=\"#\"></a>Debugging</h2>\n<p><code>Ability</code>'s <code>can</code> and <code>cannot</code> methods return boolean result and doesn't explain the reason or which rule forbids the action. To get the rule which allows or forbids an action on a subject, you can use <code>relevantRuleFor</code> method. It accepts the same arguments as <code>can</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>);\n});\n\n<span class=\"hljs-keyword\">const</span> rule = ability.relevantRuleFor(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>); <span class=\"hljs-comment\">// instance of internal `Rule` class</span>\n</code></pre>\n<p>You can use <code>rule.conditions</code> or <code>rule.fields</code> fields to understand which rule causes the unexpected result. <code>relevantRuleFor</code> returns <code>null</code> if rule cannot be found, this is the case when you check permissions on non-existing action or subject:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> rule = ability.relevantRuleFor(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>); <span class=\"hljs-comment\">// null</span>\n</code></pre>\n<p>This method is especially helpful when you use combination of direct rules with conditions and inverted rules:</p>\n<pre><code data-filename=\"defineAbility.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility, subject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> article = subject.bind(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>);\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> user = { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> };\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can, cannot</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">authorId</span>: user.id });\n  cannot(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> })\n});\n</code></pre>\n<blockquote>\n<p>For simplicity, I will use <code>subject</code> helper instead of a class to create subjects with bound type. You can read more about other ways to do it in <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/subject-type-detection&quot;}\">Subject type detection</app-link></p>\n</blockquote>\n<p>Now let's check:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { user, ability, article } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> rule = ability.relevantRuleFor(<span class=\"hljs-string\">&#x27;read&#x27;</span>, article({ <span class=\"hljs-attr\">authorId</span>: user.id }));\n<span class=\"hljs-built_in\">console</span>.log(rule.conditions); <span class=\"hljs-comment\">// { authorId: 1 }</span>\n\n<span class=\"hljs-keyword\">const</span> forbiddenRule = ability.relevantRuleFor(<span class=\"hljs-string\">&#x27;read&#x27;</span>, article({ <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> }));\n<span class=\"hljs-built_in\">console</span>.log(forbiddenRule.conditions); <span class=\"hljs-comment\">// { private: true }</span>\n\n<span class=\"hljs-keyword\">const</span> anotherRule = ability.relevantRuleFor(<span class=\"hljs-string\">&#x27;read&#x27;</span>, article({ <span class=\"hljs-attr\">authorId</span>: <span class=\"hljs-number\">2</span> }));\n<span class=\"hljs-built_in\">console</span>.log(anotherRule); <span class=\"hljs-comment\">// null, no matching rule</span>\n</code></pre>\n<p>Another way to understand why the action is forbidden is to use <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/intro&quot;}\" hash=\"forbidden-reasons\">Forbidden reasons</app-link> feature. It allows to assign a user friendly explanation to rule</p>\n<blockquote>\n<p>Forbidden reasons doesn't support direct rules. See <a href=\"https://github.com/stalniy/casl/issues/264\" target=\"_blank\" rel=\"noopener nofollow\">#264</a> to track the status of this feature</p>\n</blockquote>\n<pre><code data-filename=\"defineAbilityWithReasons.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility, subject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> article = subject.bind(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>);\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>);\n  cannot(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> }).because(<span class=\"hljs-string\">&#x27;Private content is protected by law&#x27;</span>);\n});\n\n<span class=\"hljs-keyword\">const</span> rule = ability.relevantRuleFor(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>); <span class=\"hljs-comment\">// instance of internal `Rule` class</span>\n</code></pre>\n<p>We can use the same <code>relevantRuleFor</code> method but check <code>rule.reason</code> field instead:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { ability, article } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbilityWithReasons&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> rule = ability.relevantRuleFor(<span class=\"hljs-string\">&#x27;read&#x27;</span>, article({ <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> }));\n<span class=\"hljs-built_in\">console</span>.log(rule.reason); <span class=\"hljs-comment\">// Private content is protected by law</span>\n</code></pre>\n<h2 id=\"testing\"><a name=\"testing\" class=\"h-link\" href=\"#\"></a>Testing</h2>\n<p><code>Ability</code> instance is pure in terms of functional programming. It means that for the same rules, its <code>can</code> method returns always the same result. That's why, there is no big profit in testing CASL permissions, instead you should test rule distribution logic. <strong>This sounds correct, but only at the first sight</strong>. Let's consider an example:</p>\n<pre><code data-filename=\"defineAbility.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> { Ability, AbilityBuilder, subject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> article = subject.bind(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>);\n\n<span class=\"hljs-comment\">/**\n * This function is responsible for rule distribution logic.\n * And we need to test it, not ability checks!\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineRulesFor</span>(<span class=\"hljs-params\">user</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { can, cannot, rules } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(Ability);\n\n  <span class=\"hljs-keyword\">if</span> (user.isAdmin) {\n    can(<span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>);\n    cannot(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> });\n  }\n\n  <span class=\"hljs-keyword\">return</span> rules;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> defineAbilityFor = <span class=\"hljs-function\"><span class=\"hljs-params\">user</span> =&gt;</span> <span class=\"hljs-keyword\">new</span> Ability(defineRulesFor(user));\n</code></pre>\n<p>Now we want to ensure that admin users can do anything and other can only read non-private articles. Using <a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"noopener nofollow\">mocha</a> + <a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"noopener nofollow\">chai</a> or <a href=\"https://jestjs.io/\" target=\"_blank\" rel=\"noopener nofollow\">jest</a> we can do it (we will use mocha and chai):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineRulesFor } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility&#x27;</span>;\n\ndescribe(<span class=\"hljs-string\">&#x27;Permissions&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> user;\n\n  describe(<span class=\"hljs-string\">&#x27;when user is an admin&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    beforeEach(<span class=\"hljs-function\">() =&gt;</span> {\n      user = { <span class=\"hljs-attr\">isAdmin</span>: <span class=\"hljs-literal\">true</span> };\n    });\n\n    it(<span class=\"hljs-string\">&#x27;can do anything&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n      expect(defineRulesFor(user)).to.deep.equal([\n        { <span class=\"hljs-attr\">action</span>: <span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;all&#x27;</span> }\n      ]);\n    });\n  });\n\n  describe(<span class=\"hljs-string\">&#x27;when user is a regular user&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    beforeEach(<span class=\"hljs-function\">() =&gt;</span> {\n      user = { <span class=\"hljs-attr\">isRegular</span>: <span class=\"hljs-literal\">true</span> };\n    });\n\n    it(<span class=\"hljs-string\">&#x27;can read non private article&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n      expect(defineRulesFor(user)).to.deep.contain([\n        { <span class=\"hljs-attr\">action</span>: <span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;Article&#x27;</span> },\n        { <span class=\"hljs-attr\">action</span>: <span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;Article&#x27;</span>, <span class=\"hljs-attr\">conditions</span>: { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> }, <span class=\"hljs-attr\">inverted</span>: <span class=\"hljs-literal\">true</span> }\n      ]);\n    });\n  });\n});\n</code></pre>\n<p>Do you see the issue? <strong>We've just tested implementation details and this is bad!</strong> Why?</p>\n<p>Rules logic is very expressive and you can achieve the same results using a different combination of rules. For example &quot;user can read non private articles&quot; can be expressed in another way:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { AbilityBuilder } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineRulesFor</span>(<span class=\"hljs-params\">user</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { can, cannot, rules } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(Ability);\n\n  <span class=\"hljs-keyword\">if</span> (user.isAdmin) {\n    can(<span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">false</span> });\n  }\n\n  <span class=\"hljs-keyword\">return</span> rules;\n}\n</code></pre>\n<p>And now we have only 1 direct rule that allows to read non-private articles! So, we have the same permissions, the same set of supported cases but our tests are <strong>red</strong> and that's bad. So, if we test rules' distribution logic, very likely we will need to fix old tests when we decide to change rules for some reason.</p>\n<p>Permissions logic is quite important, so the correct way to test it is to test particular cases. This saves your time from fixing tests that relies too much on implementation details and will make sure that the next version of CASL won't break your permission system (if it does please <a href=\"https://github.com/stalniy/casl/issues/new\" target=\"_blank\" rel=\"noopener nofollow\">create an issue</a>). Eventually tests should look like this:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbilityFor, article } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility&#x27;</span>;\n\ndescribe(<span class=\"hljs-string\">&#x27;Permissions&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">let</span> user;\n  <span class=\"hljs-keyword\">let</span> ability;\n\n  describe(<span class=\"hljs-string\">&#x27;when user is an admin&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    beforeEach(<span class=\"hljs-function\">() =&gt;</span> {\n      user = { <span class=\"hljs-attr\">isAdmin</span>: <span class=\"hljs-literal\">true</span> };\n      ability = defineAbilityFor(user);\n    });\n\n    it(<span class=\"hljs-string\">&#x27;can do anything&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n      expect(ability.can(<span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>)).to.be.true;\n    });\n  });\n\n  describe(<span class=\"hljs-string\">&#x27;when user is a regular user&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    beforeEach(<span class=\"hljs-function\">() =&gt;</span> {\n      user = { <span class=\"hljs-attr\">isRegular</span>: <span class=\"hljs-literal\">true</span> };\n      ability = defineAbilityFor(user);\n    });\n\n    it(<span class=\"hljs-string\">&#x27;can read non private article&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n      expect(ability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>)).to.be.true;\n      expect(ability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, article({ <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;test&#x27;</span> }))).to.be.true;\n      expect(ability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, article({ <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;test&#x27;</span>, <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">false</span> }))).to.be.true;\n      expect(ability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, article({ <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> }))).to.be.false;\n    });\n  });\n});\n</code></pre>","headings":[{"id":"debugging","title":"Debugging"},{"id":"testing","title":"Testing"}],"id":"advanced/debugging-testing"}