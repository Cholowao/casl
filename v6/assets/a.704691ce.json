{"title":"Restricting fields access","categories":["guide"],"order":40,"meta":{"keywords":null,"description":null},"content":"<p>Sometimes you may need to restrict which fields a user can access. For example, let's allow only moderators to publish <code>Article</code>:</p>\n<pre><code data-filename=\"defineAbility.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> { AbilityBuilder, createMongoAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineAbilityFor</span>(<span class=\"hljs-params\">user</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { can, rules } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(createMongoAbility);\n\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>);\n  can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, [<span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;description&#x27;</span>], { <span class=\"hljs-attr\">authorId</span>: user.id });\n\n  <span class=\"hljs-keyword\">if</span> (user.isModerator) {\n    can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, [<span class=\"hljs-string\">&#x27;published&#x27;</span>]);\n  }\n\n  <span class=\"hljs-keyword\">return</span> createMongoAbility(rules);\n}\n</code></pre>\n<p>Now we can check permissions on fields:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> defineAbilityFor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> user = { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> };\n<span class=\"hljs-keyword\">const</span> moderator = { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">isModerator</span>: <span class=\"hljs-literal\">true</span> };\n\ndefineAbilityFor(user).can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, <span class=\"hljs-string\">&#x27;published&#x27;</span>); <span class=\"hljs-comment\">// false</span>\ndefineAbilityFor(moderator).can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, <span class=\"hljs-string\">&#x27;published&#x27;</span>); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p><strong>Be attentive when you define rules for fields with conditions</strong>, the result of the check will be different depending on whether you pass a subject or subject type! To illustrate the difference let's define a simple class:</p>\n<pre><code data-filename=\"entities.js\" class=\"language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Article</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">title, description, authorId</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.title = title;\n    <span class=\"hljs-built_in\">this</span>.description = description;\n    <span class=\"hljs-built_in\">this</span>.authorId = authorId;\n    <span class=\"hljs-built_in\">this</span>.published = <span class=\"hljs-literal\">false</span>;\n  }\n}\n</code></pre>\n<p>And let's check permissions:</p>\n<pre><code data-filename=\"app.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> defineAbilityFor <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Article } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./entities&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> user = { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> };\n<span class=\"hljs-keyword\">const</span> ownArticle = <span class=\"hljs-keyword\">new</span> Article(<span class=\"hljs-string\">&#x27;CASL in Action&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>, user.id);\n<span class=\"hljs-keyword\">const</span> anotherArticle = <span class=\"hljs-keyword\">new</span> Article(<span class=\"hljs-string\">&#x27;CASL in Vue apps&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>, <span class=\"hljs-number\">2</span>);\n<span class=\"hljs-keyword\">const</span> ability = defineAbilityFor(user);\n\nability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, ownArticle, <span class=\"hljs-string\">&#x27;title&#x27;</span>); <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, anotherArticle, <span class=\"hljs-string\">&#x27;title&#x27;</span>); <span class=\"hljs-comment\">// false</span>\nability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, <span class=\"hljs-string\">&#x27;title&#x27;</span>); <span class=\"hljs-comment\">// true!</span>\n</code></pre>\n<p>So, the last check returned <code>true</code> and at the first sight it seems wrong! But it's not. Similarly to <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/intro&quot;}\" hash=\"checking-logic\">checking logic</app-link> without fields, we ask different questions:</p>\n<ul>\n<li>when we check on particular <code>Article</code> instance, we are asking <strong>can user update this article's title</strong></li>\n<li>and when we check on subject type, we are asking <strong>can user update title of at least one article?</strong></li>\n</ul>\n<p>Another way to check permissions is to extract all permitted fields from <code>PureAbility</code> instance using <code>permittedFieldsOf</code> helper from <code>@casl/ability/extra</code> sub-module. The same checking logic applies here:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { permittedFieldsOf } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability/extra&#x27;</span>;\n\n<span class=\"hljs-comment\">// the same code from app.js, the example above</span>\n\n<span class=\"hljs-keyword\">const</span> ARTICLE_FIELDS = [<span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-string\">&#x27;description&#x27;</span>, <span class=\"hljs-string\">&#x27;authorId&#x27;</span>, <span class=\"hljs-string\">&#x27;published&#x27;</span>];\n<span class=\"hljs-keyword\">const</span> options = { <span class=\"hljs-attr\">fieldsFrom</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">rule</span> =&gt;</span> rule.fields || ARTICLE_FIELDS };\n\n<span class=\"hljs-keyword\">let</span> fields = permittedFieldsOf(ability, <span class=\"hljs-string\">&#x27;update&#x27;</span>, ownArticle, options); <span class=\"hljs-comment\">// [&#x27;title&#x27;, &#x27;description&#x27;]</span>\nfields = permittedFieldsOf(ability, <span class=\"hljs-string\">&#x27;update&#x27;</span>, anotherArticle, options); <span class=\"hljs-comment\">// []</span>\nfields = permittedFieldsOf(ability, <span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, options); <span class=\"hljs-comment\">// [&#x27;title&#x27;, &#x27;description&#x27;] !</span>\n\n<span class=\"hljs-keyword\">if</span> (fields.includes(<span class=\"hljs-string\">&#x27;published&#x27;</span>)) {\n  <span class=\"hljs-comment\">// do something if can update published field</span>\n}\n</code></pre>\n<p>CASL knows nothing about shapes of our entities, so the only way to tell him is to provide a <code>fieldsFrom</code> function. This function should return a list of fields from rule. Rule has no fields if it's allowed (or disallowed) to manage all of them. In this case, we return all fields, otherwise return what is inside our rule.</p>\n<p>This method is very useful in combination with <a href=\"https://lodash.com/docs/4.17.15#pick\" target=\"_blank\" rel=\"noopener nofollow\">lodash.pick</a> to extract permitted fields from user request</p>\n<blockquote>\n<p>If you need <code>pick</code> with support for wildcards, check <a href=\"https://gist.github.com/stalniy/855f3de3115c8a89824370cb4d8bb5a7\" target=\"_blank\" rel=\"noopener nofollow\">this implementation</a></p>\n</blockquote>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> pick <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;lodash/pick&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { permittedFieldsOf } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability/extra&#x27;</span>;\n\n<span class=\"hljs-comment\">// the same code from app.js</span>\n\n<span class=\"hljs-keyword\">const</span> reqBody = {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;CASL&#x27;</span>,\n  <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;powerful&#x27;</span>,\n  <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// only moderators are allowed to change this field!</span>\n};\n<span class=\"hljs-keyword\">const</span> fields = permittedFieldsOf(ability, <span class=\"hljs-string\">&#x27;update&#x27;</span>, ownArticle, options);\n<span class=\"hljs-keyword\">const</span> rawArticle = pick(reqBody, fields); <span class=\"hljs-comment\">// { title: &#x27;CASL&#x27;, description: &#x27;powerful&#x27; }</span>\n</code></pre>\n<p>Thanks to this, users, who try to send attributes, won't be able to overcome permissions' restrictions.</p>\n<blockquote>\n<p>To know more about <code>@casl/ability/extra</code> check its <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;api&quot;}\" hash=\"extra-submodule\">API documentation</app-link></p>\n</blockquote>\n<h2 id=\"nested-fields\"><a name=\"nested-fields\" class=\"h-link\" href=\"#\"></a>Nested fields</h2>\n<p>CASL allows you to define permissions on nested fields, to do this just use dot notation, for example:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>, [<span class=\"hljs-string\">&#x27;address.city&#x27;</span>, <span class=\"hljs-string\">&#x27;address.street&#x27;</span>]);\n});\n</code></pre>\n<h2 id=\"field-patterns\"><a name=\"field-patterns\" class=\"h-link\" href=\"#\"></a>Field patterns</h2>\n<p>It's also possible to define permissions for fields using patterns. You can use <code>*</code> to match any symbol except dot (i.e., <code>.</code>) and <code>**</code> to match any symbol. For example, you want to allow access to all fields of a nested field (in spite of the nesting level):</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>, [<span class=\"hljs-string\">&#x27;address.**&#x27;</span>]);\n});\n\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>, <span class=\"hljs-string\">&#x27;address&#x27;</span>); <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>, <span class=\"hljs-string\">&#x27;address.street&#x27;</span>); <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>, <span class=\"hljs-string\">&#x27;address.city.name&#x27;</span>); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p>Or you can give access to only first level of nested fields:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>, [<span class=\"hljs-string\">&#x27;address.*&#x27;</span>]);\n});\n\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>, <span class=\"hljs-string\">&#x27;address&#x27;</span>); <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>, <span class=\"hljs-string\">&#x27;address.street&#x27;</span>); <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>, <span class=\"hljs-string\">&#x27;address.city.name&#x27;</span>); <span class=\"hljs-comment\">// false</span>\n</code></pre>\n<p>Or you can give access to top level fields using pattern. Suppose <code>User</code> instance has multiple fields for street like <code>street1</code>, <code>street2</code>, etc:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>, [<span class=\"hljs-string\">&#x27;street*&#x27;</span>]);\n});\n\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>, <span class=\"hljs-string\">&#x27;street&#x27;</span>); <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>, <span class=\"hljs-string\">&#x27;street1&#x27;</span>); <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>, <span class=\"hljs-string\">&#x27;street2&#x27;</span>); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h3 id=\"field-patterns-table\"><a name=\"field-patterns-table\" class=\"h-link\" href=\"#\"></a>Field patterns table</h3>\n<div class=\"responsive\"><table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Example</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>address.*</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address.city')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address.city.name')</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>address.**</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address.city')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address.city.name')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address.city.location.lat')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>address.*.name</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address.*.name')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address.city.name')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address.city.location.name')</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>address.**.name</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address.*.name')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address.city.name')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address.city.location.name')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>*.name</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', '*.name')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'city.name')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address.city.name')</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address.city.location.name')</code></td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>**.name</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', '*.name')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'city.name')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address.city.name')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address.city.location.name')</code></td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>ability.can('read', 'User', 'address.city.code')</code></td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n</div>","headings":[{"id":"nested-fields","title":"Nested fields"},{"id":"field-patterns","title":"Field patterns"},{"id":"field-patterns-table","title":"Field patterns table"}],"id":"guide/restricting-fields"}