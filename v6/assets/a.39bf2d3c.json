{"title":"@casl/ability API","categories":["api"],"order":10,"meta":{"keywords":null,"description":null},"content":"<p><code>@casl/ability</code> contains 2 modules:</p>\n<ul>\n<li>\n<p>core module which provides <code>PureAbility</code> and other core classes</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> core <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n</code></pre>\n</li>\n<li>\n<p>extra module which provides additional helper functions</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> extra <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability/extra&#x27;</span>;\n</code></pre>\n</li>\n</ul>\n<p>This page describes API documentation for core package only. Check <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;api/casl-ability-extra&quot;}\">@casl/ability/extra API</app-link> to get information about helper functions.</p>\n<blockquote>\n<p>All examples on this page uses <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener nofollow\">TypeScript</a></p>\n</blockquote>\n<h2 id=\"pure-ability\"><a name=\"pure-ability\" class=\"h-link\" href=\"#\"></a>PureAbility</h2>\n<p><code>PureAbility</code> is a base class that implements the functionality of checking permissions. The prefix &quot;Pure&quot; has nothing to do with functional programming. It just means this class has no predefined configuration.</p>\n<p>It is a generic class that accepts 2 parameters:</p>\n<ol>\n<li><code>Abilities</code> is either a string literal type that represents possible actions or a tuple of 2 elements that represents all possible actions on all possible subjects. By default, equals to <code>[string, Subject]</code></li>\n<li><code>Conditions</code> is a shape of conditions. There is no restriction on this parameter, so it can be anything.</li>\n</ol>\n<p>For example:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { PureAbility, Abilities } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">type</span> ClaimAbility = PureAbility&lt;<span class=\"hljs-built_in\">string</span>&gt;;\n<span class=\"hljs-keyword\">type</span> AppAbility = PureAbility&lt;[<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-built_in\">string</span>]&gt;;\n</code></pre>\n<p><strong>See also</strong>: <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/typescript&quot;}\">TypeScript Support</app-link></p>\n<h3 id=\"pure-ability-constructor\"><a name=\"pure-ability-constructor\" class=\"h-link\" href=\"#\"></a>PureAbility constructor</h3>\n<ul>\n<li>\n<p><strong>Parameters</strong> (<code>A</code> is shortened from <code>Abilities</code>):</p>\n<ul>\n<li><code>rules: RawRuleFrom&lt;A, Conditions&gt;[] = []</code></li>\n<li><code>options: AbilityOptions&lt;A, Conditions&gt; = {}</code>\n<ul>\n<li><code>detectSubjectType?: (subject?: Subject) =&gt; string</code>\nallows to check <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/subject-type-detection&quot;}\">subject type detection</app-link> logic</li>\n<li><code>conditionsMatcher?: ConditionsMatcher&lt;Conditions&gt;</code>\nallows to change the language to match conditions. See <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/customize-ability&quot;}\">Customize Ability</app-link> for details</li>\n<li><code>fieldMatcher?: FieldMatcher</code>\nallows to change the logic how fields are matched. See <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/customize-ability&quot;}\" hash=\"custom-field-matcher\">Custom field matcher</app-link> for details</li>\n<li><code>resolveAction?: ResolveAction&lt;Normalize&lt;A&gt;[0]&gt;</code>\nallows to pass a function that resolves aliases to actions. See <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/define-aliases&quot;}\">Define action aliases</app-link> for details</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>Usage</strong>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> PureAbility&lt;[<span class=\"hljs-string\">&#x27;read&#x27;</span> | <span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>]&gt;([\n  { <span class=\"hljs-attr\">action</span>: <span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;Article&#x27;</span> },\n  { <span class=\"hljs-attr\">action</span>: <span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;Article&#x27;</span> },\n]);\n</code></pre>\n</li>\n<li>\n<p><strong>See also</strong>: <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/define-rules&quot;}\">Define rules</app-link></p>\n</li>\n</ul>\n<h3 id=\"update\"><a name=\"update\" class=\"h-link\" href=\"#\"></a>update</h3>\n<p>Updates rules of <code>PureAbility</code> instance. This method completely replaces all previously define rules with new ones.</p>\n<ul>\n<li>\n<p><strong>Parameters</strong>:</p>\n<ul>\n<li><code>rules: RawRuleFrom&lt;A, Conditions&gt;[]</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Returns</strong>: <code>this</code></p>\n</li>\n<li>\n<p><strong>Emits</strong>:</p>\n<ul>\n<li><code>update</code> - before updating instance</li>\n<li><code>updated</code> - after instance has been updated</li>\n</ul>\n</li>\n<li>\n<p><strong>Usage</strong><br>\nUse it when you need to update permissions. In the common scenario, you need to do this on login, logout and when user permissions are changed.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { PureAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> PureAbility([{ <span class=\"hljs-attr\">action</span>: <span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;all&#x27;</span> }]);\nability.update([]); <span class=\"hljs-comment\">// took back all permissions</span>\n</code></pre>\n</li>\n<li>\n<p><strong>See also</strong>: <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/intro&quot;}\">CASL guide</app-link></p>\n</li>\n</ul>\n<h3 id=\"can-of-pure-ability\"><a name=\"can-of-pure-ability\" class=\"h-link\" href=\"#\"></a>can of PureAbility</h3>\n<p>Checks that the provided action and subject satisfy permissions. Depending on <code>Abilities</code> generic parameter this function accepts either single <code>action</code> argument (when <code>Abilities</code> is a string) or 3 arguments (when <code>Abilities</code> is a tuple).</p>\n<ul>\n<li>\n<p><strong>Parameters</strong></p>\n<ul>\n<li><code>action: string</code> - an action to check</li>\n<li><code>subject: Subject</code> - a subject to check</li>\n<li><code>field?: string</code> - a field to check</li>\n</ul>\n</li>\n<li>\n<p><strong>Returns</strong>: <code>boolean</code></p>\n</li>\n<li>\n<p><strong>Usage</strong>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { PureAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> claimAbility = <span class=\"hljs-keyword\">new</span> PureAbility&lt;<span class=\"hljs-string\">&#x27;read&#x27;</span> | <span class=\"hljs-string\">&#x27;update&#x27;</span>&gt;();\n<span class=\"hljs-comment\">// the 1st generic is a string, so the method accepts only single parameter</span>\nclaimAbility.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>);\n\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> PureAbility&lt;[<span class=\"hljs-string\">&#x27;read&#x27;</span> | <span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>]&gt;();\n<span class=\"hljs-comment\">// the 1st argument is a tuple, so the method accepts 2-3 parameters</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>);\n</code></pre>\n</li>\n<li>\n<p><strong>See also</strong>: <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/intro&quot;}\">CASL guide</app-link></p>\n</li>\n</ul>\n<h3 id=\"cannot-of-pure-ability\"><a name=\"cannot-of-pure-ability\" class=\"h-link\" href=\"#\"></a>cannot of PureAbility</h3>\n<p>This method works the same way as <a href=\"#can-of-pure-ability\">can</a> but returns inverted result.</p>\n<h3 id=\"relevant-rule-for\"><a name=\"relevant-rule-for\" class=\"h-link\" href=\"#\"></a>relevantRuleFor</h3>\n<p>This method returns a rule that matches provided action, subject and field. If rule cannot be found it returns <code>null</code>. May be useful for debugging.</p>\n<ul>\n<li><strong>Parameters</strong>: accepts the same parameters as <a href=\"#can-of-pure-ability\">can</a></li>\n<li><strong>Returns</strong>: <code>Rule&lt;Abilities, Conditions&gt; | null</code></li>\n<li><strong>See also</strong>: <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/debugging-testing&quot;}\">Debugging and testing</app-link></li>\n</ul>\n<h3 id=\"rules-for\"><a name=\"rules-for\" class=\"h-link\" href=\"#\"></a>rulesFor</h3>\n<p>This method returns all registered rules for provided action, subject and field. Useful for debugging and for extensions. Contrary to <code>relevantRuleFor</code> accepts subject type as the 2nd argument or:</p>\n<ul>\n<li><strong>Parameters</strong>:\n<ul>\n<li><code>action: string</code> - an action to check</li>\n<li><code>subjectType: SubjectType</code> - a subject type to check (this one is optional if <code>Abilities</code> is a string literal type)</li>\n<li><code>field?: string</code> - a field to check</li>\n</ul>\n</li>\n<li><strong>Returns</strong>: <code>Rule&lt;Abilities, Conditions&gt;[]</code></li>\n</ul>\n<h3 id=\"possible-rules-for\"><a name=\"possible-rules-for\" class=\"h-link\" href=\"#\"></a>possibleRulesFor</h3>\n<p>Similar to <a href=\"#rules-for\">rulesFor</a> but it accepts only up to 2 parameters (depending on the type of 1st generic parameter). Returns all possible rules ignoring field level restrictions. Useful for debugging and for extensions.</p>\n<ul>\n<li><strong>Parameters</strong>:\n<ul>\n<li><code>action: string</code></li>\n<li><code>subjectType: SubjectType</code></li>\n</ul>\n</li>\n<li><strong>Returns</strong>: <code>Rule&lt;Abilities, Conditions&gt;[]</code></li>\n</ul>\n<h3 id=\"on\"><a name=\"on\" class=\"h-link\" href=\"#\"></a>on</h3>\n<p>Allows to register event handler on specific event. Currently, only 2 events are supported:</p>\n<ul>\n<li>\n<p><code>update</code>, triggered before an instance is updated</p>\n</li>\n<li>\n<p><code>updated</code>, triggered after an instance is updated</p>\n</li>\n<li>\n<p><strong>Parameters</strong>:</p>\n<ul>\n<li><code>event: 'update' | 'updated'</code></li>\n<li><code>handler: (event: Event) =&gt; void</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Returns</strong>: a function that removes event handler</p>\n</li>\n<li>\n<p><strong>Usage</strong><br>\nUseful for frontend frameworks integration. Usually you have a single ability instance in the app and a lot of places which need to recheck permissions when the instance's rules are changed.</p>\n</li>\n</ul>\n<h3 id=\"rules-property-of-pure-ability\"><a name=\"rules-property-of-pure-ability\" class=\"h-link\" href=\"#\"></a>rules property of PureAbility</h3>\n<p>Returns an array of <code>RawRule</code>s passed in <code>PureAbility</code> constructor.</p>\n<h3 id=\"detect-subject-type\"><a name=\"detect-subject-type\" class=\"h-link\" href=\"#\"></a>detectSubjectType</h3>\n<p>Can be used to detect subject type of object. Works for both subject types and subject instances.</p>\n<ul>\n<li><strong>Parameters</strong>:\n<ul>\n<li><code>subject: Subject</code></li>\n</ul>\n</li>\n<li><strong>Returns</strong>: <code>string</code></li>\n</ul>\n<h2 id=\"ability-deprecated-by-create-mongo-ability\"><a name=\"ability-deprecated-by-create-mongo-ability\" class=\"h-link\" href=\"#\"></a>Ability (deprecated by createMongoAbility)</h2>\n<p><code>Ability</code> extends <a href=\"#pure-ability\"><code>PureAbility</code></a>. It sets default values for 2 options:</p>\n<ul>\n<li><code>conditionsMatcher</code> into <a href=\"#mongo-query-matcher\"><code>mongoQueryMatcher</code></a></li>\n<li><code>fieldMatcher</code> into <a href=\"#field-pattern-matcher\"><code>fieldPatternMatcher</code></a>.</li>\n</ul>\n<p>It also enforces <code>MongoQuery</code> restriction on the <code>Conditions</code> generic parameter. By default, it is <code>Ability&lt;Abilities, MongoQuery&gt;</code>.</p>\n<h2 id=\"create-mongo-ability\"><a name=\"create-mongo-ability\" class=\"h-link\" href=\"#\"></a>createMongoAbility</h2>\n<p>This is a factory function that creates an instance of <code>PureAbility</code> with Mongo-like conditions to restrict access.</p>\n<h2 id=\"ability-builder\"><a name=\"ability-builder\" class=\"h-link\" href=\"#\"></a>AbilityBuilder</h2>\n<p>This class allows to construct <code>PureAbility</code> instance in declarative way. It accepts a single generic parameter <code>T extends AnyAbility</code>. Usually, we don't need to provide it, as TypeScript will always infer it for us (just don't forget to pass class of <code>Ability</code> in constructor).</p>\n<h3 id=\"ability-builder-constructor\"><a name=\"ability-builder-constructor\" class=\"h-link\" href=\"#\"></a>AbilityBuilder constructor</h3>\n<ul>\n<li>\n<p><strong>Parameters</strong>:</p>\n<ul>\n<li><code>AbilityType: AbilityClass&lt;TAbility&gt;</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Usage</strong>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { AbilityBuilder, createMongoAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> { can, build } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(createMongoAbility);\n</code></pre>\n</li>\n<li>\n<p><strong>See also</strong>: <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/define-rules&quot;}\">Define rules</app-link></p>\n</li>\n</ul>\n<h3 id=\"can-of-ability-builder\"><a name=\"can-of-ability-builder\" class=\"h-link\" href=\"#\"></a>can of AbilityBuilder</h3>\n<p>Registers a <code>RawRule</code> instance in <code>rules</code> array. Depending on the passed in generic parameter, this function accepts either single <code>action</code> argument (when <code>Abilities</code> generic of <code>PureAbility</code> is a string) or 3 arguments (when <code>Abilities</code> is a tuple). In general it accepts 1-4 parameters.</p>\n<ul>\n<li>\n<p><strong>Parameters</strong>: this method has 2 overloads</p>\n<ul>\n<li><code>action: string | string[]</code></li>\n<li><code>subjectType: string | Function</code></li>\n<li><code>fields: string[]</code></li>\n<li><code>conditions: Conditions</code></li>\n<li><strong>and</strong></li>\n<li><code>action: string | string[]</code></li>\n<li><code>subjectType: string | Function</code></li>\n<li><code>conditions: Conditions</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Returns</strong> <code>RuleBuilder</code>, a class that allows to further change constructed <code>RawRule</code> (e.g., add forbidden reason).</p>\n</li>\n<li>\n<p><strong>Usage</strong>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { AbilityBuilder, PureAbility, createMongoAbility, AbilityClass } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-comment\">// action only Ability type</span>\n<span class=\"hljs-keyword\">type</span> ClaimAbility = PureAbility&lt;<span class=\"hljs-string\">&#x27;read&#x27;</span> | <span class=\"hljs-string\">&#x27;update&#x27;</span>&gt;;\n<span class=\"hljs-keyword\">const</span> ClaimAbility = PureAbility <span class=\"hljs-keyword\">as</span> AbilityClass&lt;ClaimAbility&gt;;\n<span class=\"hljs-keyword\">const</span> { can, build } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(ClaimAbility);\n\ncan(<span class=\"hljs-string\">&#x27;read&#x27;</span>);\ncan(<span class=\"hljs-string\">&#x27;update&#x27;</span>);\n\n<span class=\"hljs-comment\">// or action and subject Ability type</span>\n<span class=\"hljs-keyword\">const</span> { can, build } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(createMongoAbility);\n\ncan(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> });\ncan(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>, [<span class=\"hljs-string\">&#x27;firstName&#x27;</span>, <span class=\"hljs-string\">&#x27;lastName&#x27;</span>]);\n\n<span class=\"hljs-keyword\">const</span> ability = build();\n</code></pre>\n</li>\n<li>\n<p><strong>See also</strong>: <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/define-rules&quot;}\">Define rules</app-link></p>\n</li>\n</ul>\n<h3 id=\"cannot-of-ability-builder\"><a name=\"cannot-of-ability-builder\" class=\"h-link\" href=\"#\"></a>cannot of AbilityBuilder</h3>\n<p>Registers an inverted <code>RawRule</code> inside <code>AbilityBuilder</code>. Accepts the same parameters and has the same behavior as <a href=\"#can-of-ability-builder\">can method</a>.</p>\n<h3 id=\"build\"><a name=\"build\" class=\"h-link\" href=\"#\"></a>build</h3>\n<p>Builds an instance of provided <code>Ability</code> type.</p>\n<ul>\n<li><strong>Parameters</strong>:\n<ul>\n<li><code>options?: AbilityOptionsOf&lt;TAbility&gt;</code></li>\n</ul>\n</li>\n<li><strong>Returns</strong> a new <code>TAbility</code> instance</li>\n</ul>\n<h3 id=\"rules-property-of-ability-builder\"><a name=\"rules-property-of-ability-builder\" class=\"h-link\" href=\"#\"></a>rules property of AbilityBuilder</h3>\n<p>Contains an array of <code>RawRule</code>s registered by <a href=\"#can-of-ability-builder\"><code>can</code></a> and <a href=\"#cannot-of-ability-builder\"><code>cannot</code></a> methods.</p>\n<h2 id=\"define-ability\"><a name=\"define-ability\" class=\"h-link\" href=\"#\"></a>defineAbility</h2>\n<p>This function allows to define <a href=\"#ability\"><code>MongoAbility</code></a> instance in a compact form. Cannot be used to create <code>PureAbility</code> instances. It's very useful for writing tests and documentation.</p>\n<ul>\n<li><strong>Signature</strong> (<code>T</code> is <code>TAbility</code>):\n<ul>\n<li><code>&lt;T extends AnyAbility&gt;(define: DSL&lt;T, void&gt;, options?: AbilityOptionsOf&lt;T&gt;) =&gt; T</code></li>\n<li><code>&lt;T extends AnyAbility&gt;(define: DSL&lt;T, Promise&lt;void&gt;&gt;, options?: AbilityOptionsOf&lt;T&gt;) =&gt; Promise&lt;T&gt;</code></li>\n</ul>\n</li>\n<li><strong>See also</strong>: <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/define-rules&quot;}\">Define rules</app-link></li>\n</ul>\n<h2 id=\"forbidden-error\"><a name=\"forbidden-error\" class=\"h-link\" href=\"#\"></a>ForbiddenError</h2>\n<p>This class is useful if you want to stop execution of the next code in case if user doesn't have permission to do something. Has private <code>constructor</code>, so cannot be instantiated with <code>new</code> (in TypeScript). It's a generic class that accepts <code>TAbility</code> as a single parameter. For example:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { ForbiddenError, defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>)\n});\n\nForbiddenError.from(ability).throwUnlessCan(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>);\n<span class=\"hljs-comment\">// fetch article from database</span>\n</code></pre>\n<h3 id=\"static-from\"><a name=\"static-from\" class=\"h-link\" href=\"#\"></a>static from</h3>\n<p>Creates a <code>ForbiddenError</code> instance from provided <code>Ability</code> instance.</p>\n<ul>\n<li><strong>Parameters</strong>:\n<ul>\n<li><code>ability: TAbility</code></li>\n</ul>\n</li>\n<li><strong>Returns</strong> <code>ForbiddenError</code> instance</li>\n</ul>\n<h3 id=\"static-set-default-message\"><a name=\"static-set-default-message\" class=\"h-link\" href=\"#\"></a>static setDefaultMessage</h3>\n<p>Allows to change default error message for all <code>ForbiddenError</code>s. By default, the error is <code>Cannot execute &quot;${error.action}&quot; on &quot;${error.subjectType}&quot;</code></p>\n<ul>\n<li>\n<p><strong>Parameters</strong>:</p>\n<ul>\n<li><code>messageOrFn: string | GetErrorMessage</code> - message or function that returns string</li>\n</ul>\n</li>\n<li>\n<p><strong>Returns</strong> void</p>\n</li>\n<li>\n<p><strong>Usage</strong>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { ForbiddenError } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\nForbiddenError.setDefaultMessage(<span class=\"hljs-string\">&#x27;Not authorized&#x27;</span>);\n<span class=\"hljs-comment\">// or more verbose</span>\nForbiddenError.setDefaultMessage(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =&gt;</span> <span class=\"hljs-string\">`You are not allowed to <span class=\"hljs-subst\">${error.action}</span> on <span class=\"hljs-subst\">${error.subjectType}</span>`</span>);\n</code></pre>\n</li>\n</ul>\n<h3 id=\"set-message\"><a name=\"set-message\" class=\"h-link\" href=\"#\"></a>setMessage</h3>\n<p>Changes message of a particular <code>ForbiddenError</code> instance.</p>\n<ul>\n<li>\n<p><strong>Parameters</strong>:</p>\n<ul>\n<li><code>message: string</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Returns</strong> <code>this</code></p>\n</li>\n<li>\n<p><strong>Usage</strong>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { ForbiddenError } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> ability <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./appAbility&#x27;</span>;\n\nForbiddenError.from(ability)\n  .setMessage(<span class=\"hljs-string\">&#x27;You cannot update posts&#x27;</span>)\n  .throwUnlessCan(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>);\n</code></pre>\n</li>\n</ul>\n<h3 id=\"throw-unless-can\"><a name=\"throw-unless-can\" class=\"h-link\" href=\"#\"></a>throwUnlessCan</h3>\n<p>Accepts the same parameters as <a href=\"#can-of-pure-ability\">PureAbility's can method</a>. Throws a <code>ForbiddenError</code> if user cannot do the provided action on provided subject.</p>\n<h2 id=\"get-default-error-message\"><a name=\"get-default-error-message\" class=\"h-link\" href=\"#\"></a>getDefaultErrorMessage</h2>\n<p>A function that returns default error message for <code>ForbiddenError</code>. Is useful to revert back default message after setting it using <a href=\"#static-set-default-message\"><code>ForbiddenError.setDefaultMessage</code></a>.</p>\n<h2 id=\"field-pattern-matcher\"><a name=\"field-pattern-matcher\" class=\"h-link\" href=\"#\"></a>fieldPatternMatcher</h2>\n<p>This factory function accepts an array of fields and creates a function that matches fields by patterns using wildcards (i.e., <code>*</code>). It's used as a default field matcher option in <code>Ability</code> class.</p>\n<ul>\n<li>\n<p><strong>Factory Parameters</strong>:</p>\n<ul>\n<li><code>fields: string[]</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Factory Returns</strong> <code>MatchField</code></p>\n</li>\n<li>\n<p><strong>Matcher Parameters</strong>:</p>\n<ul>\n<li><code>field: string</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Matcher Returns</strong> <code>boolean</code></p>\n</li>\n<li>\n<p><strong>Usage</strong></p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { fieldPatternMatcher } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> matchField = fieldPatternMatcher([<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-string\">&#x27;email&#x27;</span>, <span class=\"hljs-string\">&#x27;address.**&#x27;</span>]);\n<span class=\"hljs-built_in\">console</span>.log(matchField(<span class=\"hljs-string\">&#x27;name&#x27;</span>)); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(matchField(<span class=\"hljs-string\">&#x27;address.street&#x27;</span>)); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n</li>\n<li>\n<p><strong>See also</strong>: <a href=\"#ability\">Ability API</a>, <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/restricting-fields&quot;}\">Restricting field access</app-link>, <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/customize-ability&quot;}\">Customize Ability</app-link></p>\n</li>\n</ul>\n<h2 id=\"mongo-query-matcher\"><a name=\"mongo-query-matcher\" class=\"h-link\" href=\"#\"></a>mongoQueryMatcher</h2>\n<p>This factory function creates a matcher that matches subjects based on <a href=\"http://docs.mongodb.org/manual/reference/operator/query/\" target=\"_blank\" rel=\"noopener nofollow\">MongoDB query language</a>. It's used as a default field matcher option in <code>Ability</code> class.</p>\n<ul>\n<li>\n<p><strong>Factory Parameters</strong>:</p>\n<ul>\n<li><code>conditions: MongoQuery</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Factory Returns</strong> <code>ConditionsMatcher&lt;MongoQuery&gt;</code></p>\n</li>\n<li>\n<p><strong>Matcher Parameters</strong>:</p>\n<ul>\n<li><code>object: Record&lt;PropertyKey, any&gt;</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Matcher Returns</strong> <code>boolean</code></p>\n</li>\n<li>\n<p><strong>Usage</strong><br>\nCan be passed as <code>conditionsMatcher</code> option to <code>Ability</code> and <code>PureAbility</code> classes</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { mongoQueryMatcher } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> matchConditions = mongoQueryMatcher({ <span class=\"hljs-attr\">authorId</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> });\n<span class=\"hljs-built_in\">console</span>.log(matchConditions({ <span class=\"hljs-attr\">authorId</span>: <span class=\"hljs-number\">2</span> })); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">console</span>.log(matchConditions({ <span class=\"hljs-attr\">authorId</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> })); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n</li>\n<li>\n<p><strong>See also</strong>: <a href=\"#ability\">Ability API</a>, <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/conditions-in-depth&quot;}\">Conditions in depth</app-link>, <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/customize-ability&quot;}\">Customize Ability</app-link></p>\n</li>\n</ul>\n<h2 id=\"build-mongo-query-matcher\"><a name=\"build-mongo-query-matcher\" class=\"h-link\" href=\"#\"></a>buildMongoQueryMatcher</h2>\n<p>This is a factory of factory. It allows to extend <code>mongoQueryMatcher</code> with custom mongo operators. See <a href=\"https://github.com/stalniy/ucast\" target=\"_blank\" rel=\"noopener nofollow\">ucast</a> for details</p>\n<ul>\n<li><strong>Factory Parameters</strong>:\n<ul>\n<li><code>parsingInstructions: Record&lt;string, ParsingInstruction&gt;</code></li>\n<li><code>interpreters: Record&lt;string, JsOperator&gt;</code></li>\n</ul>\n</li>\n<li><strong>Factory Returns</strong> extended <code>mongoQueryMatcher</code></li>\n<li><strong>Usage</strong><br>\nThe result of this function can be passed as <code>conditionsMatcher</code> option to <code>Ability</code> and <code>PureAbility</code> classes.</li>\n<li><strong>See also</strong>: <a href=\"#mongo-query-matcher\">mongoQueryMatcher API</a>, <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/customize-ability&quot;}\">Customize Ability</app-link></li>\n</ul>\n<h2 id=\"create-alias-resolver\"><a name=\"create-alias-resolver\" class=\"h-link\" href=\"#\"></a>createAliasResolver</h2>\n<p>Creates a function that resolves alias to real actions. Can be passed as <code>resolveAction</code> option to <code>Ability</code> and <code>PureAbility</code> classes.</p>\n<ul>\n<li><strong>Parameters</strong>:\n<ul>\n<li><code>aliasMap: AliasMap</code></li>\n</ul>\n</li>\n<li><strong>Returns</strong> <code>(action: string | string[]) =&gt; string | string[]</code></li>\n<li><strong>See also</strong>: <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/define-aliases&quot;}\">Define Action Aliases</app-link></li>\n</ul>\n<h2 id=\"detect-subject-type\"><a name=\"detect-subject-type\" class=\"h-link\" href=\"#\"></a>detectSubjectType</h2>\n<p>The default subject type detection logic. Can be passed as <code>detectSubjectType</code> option to <code>Ability</code> and <code>PureAbility</code> classes. Can be used to extend the default logic. The checking logic is the following:</p>\n<ul>\n<li>\n<p>if <code>subject</code> is <code>undefined</code>, returns <code>all</code></p>\n</li>\n<li>\n<p>if <code>subject</code> is a <code>ForcedSubject</code>, returns its forced type</p>\n</li>\n<li>\n<p>if <code>subject</code> is an object, returns <code>constructor.modelName || constructor.name</code></p>\n</li>\n<li>\n<p><strong>Parameters</strong>:</p>\n<ul>\n<li><code>subject?: {}</code></li>\n</ul>\n</li>\n<li>\n<p><strong>Returns</strong> a string (i.e., subject type)</p>\n</li>\n<li>\n<p><strong>See also</strong>: <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/subject-type-detection&quot;}\">Subject type detection</app-link></p>\n</li>\n</ul>\n<h2 id=\"subject\"><a name=\"subject\" class=\"h-link\" href=\"#\"></a>subject</h2>\n<p>Sets subject type for a plain object. You shouldn't use this if you use classes or define custom <code>detectSubjectType</code> algorithm. Accepts 2 generic parameters <code>TSubjectType</code> and <code>TObject</code>.</p>\n<ul>\n<li><strong>Parameters</strong>:\n<ul>\n<li><code>subjectType: TSubjectType</code></li>\n<li><code>object: TObject</code></li>\n</ul>\n</li>\n<li><strong>Returns</strong> <code>TObject &amp; ForcesSubject&lt;TSubjectType&gt;</code></li>\n<li><strong>See also</strong>: <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/subject-type-detection&quot;}\">Subject type detection</app-link></li>\n</ul>","headings":[{"id":"pure-ability","title":"PureAbility"},{"id":"pure-ability-constructor","title":"PureAbility constructor"},{"id":"update","title":"update"},{"id":"can-of-pure-ability","title":"can of PureAbility"},{"id":"cannot-of-pure-ability","title":"cannot of PureAbility"},{"id":"relevant-rule-for","title":"relevantRuleFor"},{"id":"rules-for","title":"rulesFor"},{"id":"possible-rules-for","title":"possibleRulesFor"},{"id":"on","title":"on"},{"id":"rules-property-of-pure-ability","title":"rules property of PureAbility"},{"id":"detect-subject-type","title":"detectSubjectType"},{"id":"ability-deprecated-by-create-mongo-ability","title":"Ability (deprecated by createMongoAbility)"},{"id":"create-mongo-ability","title":"createMongoAbility"},{"id":"ability-builder","title":"AbilityBuilder"},{"id":"ability-builder-constructor","title":"AbilityBuilder constructor"},{"id":"can-of-ability-builder","title":"can of AbilityBuilder"},{"id":"cannot-of-ability-builder","title":"cannot of AbilityBuilder"},{"id":"build","title":"build"},{"id":"rules-property-of-ability-builder","title":"rules property of AbilityBuilder"},{"id":"define-ability","title":"defineAbility"},{"id":"forbidden-error","title":"ForbiddenError"},{"id":"static-from","title":"static from"},{"id":"static-set-default-message","title":"static setDefaultMessage"},{"id":"set-message","title":"setMessage"},{"id":"throw-unless-can","title":"throwUnlessCan"},{"id":"get-default-error-message","title":"getDefaultErrorMessage"},{"id":"field-pattern-matcher","title":"fieldPatternMatcher"},{"id":"mongo-query-matcher","title":"mongoQueryMatcher"},{"id":"build-mongo-query-matcher","title":"buildMongoQueryMatcher"},{"id":"create-alias-resolver","title":"createAliasResolver"},{"id":"detect-subject-type","title":"detectSubjectType"},{"id":"subject","title":"subject"}],"id":"api/casl-ability"}