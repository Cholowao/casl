{"title":"Conditions in Depth","categories":["guide"],"order":30,"meta":{"keywords":null,"description":null},"content":"<p>Thanks to <a href=\"https://github.com/stalniy/ucast\" target=\"_blank\" rel=\"noopener nofollow\">ucast</a>, we can define permissions using <a href=\"http://docs.mongodb.org/manual/reference/operator/query/\" target=\"_blank\" rel=\"noopener nofollow\">MongoDB query language</a>.</p>\n<p>Don't worry, if you are not familiar with MongoDB query language. We will go through some of its operators in this guide. But before we start, let's see how useful it may be by creating simple article scheduling logic, that allows to read articles only if their <code>createdAt</code> is in the past:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> today = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().setHours(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">createdAt</span>: { <span class=\"hljs-attr\">$lte</span>: today } })\n});\n</code></pre>\n<p>Or let's allow to read articles that are in <code>review</code> or <code>published</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">status</span>: { <span class=\"hljs-attr\">$in</span>: [<span class=\"hljs-string\">&#x27;review&#x27;</span>, <span class=\"hljs-string\">&#x27;published&#x27;</span>] } })\n});\n</code></pre>\n<p>Do you see the power it brings?</p>\n<h2 id=\"mongo-db-and-its-query-language\"><a name=\"mongo-db-and-its-query-language\" class=\"h-link\" href=\"#\"></a>MongoDB and its query language</h2>\n<p><a href=\"https://www.mongodb.com/\" target=\"_blank\" rel=\"noopener nofollow\">MongoDB</a> is a general purpose, document-based, distributed database built for modern applications and for the cloud era. In simple words, this is a <a href=\"https://en.wikipedia.org/wiki/NoSQL\" target=\"_blank\" rel=\"noopener nofollow\">NoSQL</a> database that stores records in <code>JSON</code> (actually in <a href=\"https://docs.mongodb.com/manual/reference/glossary/#term-bson\" target=\"_blank\" rel=\"noopener nofollow\">BSON</a>) format.</p>\n<p>As they decided to store records in <code>JSON</code>, they needed a new query language that would allow to get filtered records from their database. This is how they created own query language.</p>\n<p>JavaScript is a superset of <code>JSON</code>, that's why we decided to use MongoDB query language to restrict permissions for subjects based on their properties.</p>\n<p><strong>You don't need to know anything about MongoDB</strong> in order to use CASL, you need to know only subset of its query language operators.</p>\n<p>Query is what you pass in conditions to <code>can</code> and <code>cannot</code> functions (3rd or 4th argument if you pass fields). So, it's an object which defines restrictions on a JavaScript object and if that restrictions are matched then a matched object is returned.</p>\n<p>Let's see at examples of queries:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> queries = [\n  { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> }, <span class=\"hljs-comment\">// (1)</span>\n  { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">hidden</span>: <span class=\"hljs-literal\">false</span> }, <span class=\"hljs-comment\">// (2)</span>\n  { <span class=\"hljs-attr\">private</span>: { <span class=\"hljs-attr\">$exists</span>: <span class=\"hljs-literal\">true</span> } },\n  { <span class=\"hljs-attr\">status</span>: { <span class=\"hljs-attr\">$in</span>: [<span class=\"hljs-string\">&#x27;review&#x27;</span>, <span class=\"hljs-string\">&#x27;inProgress&#x27;</span>] } },\n  { <span class=\"hljs-attr\">price</span>: { <span class=\"hljs-attr\">$gte</span>: <span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">$lte</span>: <span class=\"hljs-number\">50</span> } }, <span class=\"hljs-comment\">// (3)</span>\n  { <span class=\"hljs-attr\">tags</span>: { <span class=\"hljs-attr\">$all</span>: [<span class=\"hljs-string\">&#x27;permission&#x27;</span>, <span class=\"hljs-string\">&#x27;casl&#x27;</span>] } },\n  { <span class=\"hljs-attr\">email</span>: { <span class=\"hljs-attr\">$regex</span>: <span class=\"hljs-regexp\">/@gmail.com$/i</span> } },\n  { <span class=\"hljs-string\">&#x27;cities.address&#x27;</span>: { <span class=\"hljs-attr\">$elemMatch</span>: { <span class=\"hljs-attr\">postalCode</span>: { <span class=\"hljs-attr\">$regex</span>: <span class=\"hljs-regexp\">/^AB/</span> } } } } <span class=\"hljs-comment\">// (4)</span>\n]\n</code></pre>\n<p>We can combine any amount of fields inside single query, all their restrictions are tested according to <code>AND</code> logic. If we do not specify operator, the query uses <code>$eq</code> operator (equality operator). So, a query like <code>(2)</code> matches objects if their <code>private</code> and <code>hidden</code> property values equal to <code>false</code> (i.e., <code>!object.private &amp;&amp; !object.hidden</code>).</p>\n<p>We can specify multiple operators for the same field, in this case each operator must return <code>true</code> to match a field value. So, <code>(3)</code> matches objects only if <code>price</code> property value is between 10 and 50 inclusively (i.e., <code>object.price &gt;= 10 &amp;&amp; object.price &lt;= 50</code>).</p>\n<p>To access nested property value, you can use dot notation as in <code>(4)</code>.</p>\n<h2 id=\"supported-operators\"><a name=\"supported-operators\" class=\"h-link\" href=\"#\"></a>Supported operators</h2>\n<p>CASL uses only subset of MongoDB operators which cover majority of cases.</p>\n<blockquote>\n<p>If you need to use more operators or define custom ones, read <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/customize-ability&quot;}\">Customize ability</app-link></p>\n</blockquote>\n<p>The list of operators:</p>\n<ol>\n<li><a href=\"https://docs.mongodb.com/manual/reference/operator/query/eq\" target=\"_blank\" rel=\"noopener nofollow\">$eq</a> and <a href=\"https://docs.mongodb.com/manual/reference/operator/query/ne\" target=\"_blank\" rel=\"noopener nofollow\">$ne</a><br>\nobject value should equal specified value. <code>$ne</code> means <code>not $eq</code></li>\n<li><a href=\"https://docs.mongodb.com/manual/reference/operator/query/lt\" target=\"_blank\" rel=\"noopener nofollow\">$lt</a> and <a href=\"https://docs.mongodb.com/manual/reference/operator/query/lte\" target=\"_blank\" rel=\"noopener nofollow\">$lte</a><br>\nobject value should be less than specified value. Can be used for <code>Date</code>s, numbers and strings. <code>$lte</code> is a combination of <code>$lt</code> and <code>$eq</code>, so it's an inclusive check.</li>\n<li><a href=\"https://docs.mongodb.com/manual/reference/operator/query/gt\" target=\"_blank\" rel=\"noopener nofollow\">$gt</a> and <a href=\"https://docs.mongodb.com/manual/reference/operator/query/gte\" target=\"_blank\" rel=\"noopener nofollow\">$gte</a><br>\nobject value should be greater than specified value. Can be used for <code>Date</code>s, numbers and strings. <code>$gte</code> is a combination of <code>$gt</code> and <code>$eq</code>, so it's an inclusive check.</li>\n<li><a href=\"https://docs.mongodb.com/manual/reference/operator/query/in\" target=\"_blank\" rel=\"noopener nofollow\">$in</a> and <a href=\"https://docs.mongodb.com/manual/reference/operator/query/nin\" target=\"_blank\" rel=\"noopener nofollow\">$nin</a><br>\nChecks that object's property is of the specified array values. Can be used for single value and for arrays as well. If object's property is an array it checks for intersection. <code>$nin</code> means <code>not $in</code></li>\n<li><a href=\"https://docs.mongodb.com/manual/reference/operator/query/all\" target=\"_blank\" rel=\"noopener nofollow\">$all</a><br>\nChecks that object's property should contain all elements from the specified array. Can be used for arrays only.</li>\n<li><a href=\"https://docs.mongodb.com/manual/reference/operator/query/size\" target=\"_blank\" rel=\"noopener nofollow\">$size</a><br>\nChecks that array length equals to specified value. Can be used for arrays only</li>\n<li><a href=\"https://docs.mongodb.com/manual/reference/operator/query/regex\" target=\"_blank\" rel=\"noopener nofollow\">$regex</a><br>\nAllows to test object's property value using <a href=\"https://en.wikipedia.org/wiki/Regular_expression\" target=\"_blank\" rel=\"noopener nofollow\">regular expression</a>. Can be used for strings only</li>\n<li><a href=\"https://docs.mongodb.com/manual/reference/operator/query/exists\" target=\"_blank\" rel=\"noopener nofollow\">$exists</a><br>\nChecks that property exists in the object.</li>\n<li><a href=\"https://docs.mongodb.com/manual/reference/operator/query/elemMatch\" target=\"_blank\" rel=\"noopener nofollow\">$elemMatch</a><br>\nChecks nested elements shape. Use <code>$elemMatch</code> operator to specify multiple criteria on the elements of an array such that at least one array element satisfies all the specified criteria. If you specify only a single condition in the <code>$elemMatch</code> expression, <code>$elemMatch</code> is not necessary. See <a href=\"https://docs.mongodb.com/manual/tutorial/query-arrays/#specify-multiple-criteria-for-array-elements\" target=\"_blank\" rel=\"noopener nofollow\">Specify Multiple Conditions for Array Elements</a> for details.</li>\n</ol>\n<h2 id=\"why-logical-query-operators-are-not-included\"><a name=\"why-logical-query-operators-are-not-included\" class=\"h-link\" href=\"#\"></a>Why logical query operators are not included</h2>\n<p>CASL doesn't use <code>$and</code>, <code>$or</code>, <code>$nor</code> and <code>$not</code> operators. This is because the same behavior can be achieved by combining <code>can</code> and <code>cannot</code> rules. Combination of <code>can</code> rules for the same pair of action and subject allows to mimic <code>$or</code> operator and combination of <code>cannot</code> rules allows to mimic <code>$not</code> and <code>$and</code> operators. Moreover as we discussed in this guide, all properties inside conditions object are checked by <code>AND</code> logic, this is another way to mimic <code>$and</code> operator.</p>\n<p><code>$nor</code> cannot be reproduced in any way, so if you are sure that you need it, I'd recommend to rethink your permission logic together with the client or product owner. But if you are 100% sure, please read how to <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/customize-ability&quot;}\">Customize ability</app-link>.</p>\n<h2 id=\"checking-logic-in-casl\"><a name=\"checking-logic-in-casl\" class=\"h-link\" href=\"#\"></a>Checking logic in CASL</h2>\n<p>When you define rules with conditions, the last are converted to functions that checks whether object matches specified MongoDB query. Let's see an example:</p>\n<pre><code data-filename=\"defineAbility.js\" class=\"language-js\"><span class=\"hljs-keyword\">import</span> { defaultAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defaultAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, {\n    <span class=\"hljs-attr\">createdAt</span>: { <span class=\"hljs-attr\">$lte</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>() },\n    <span class=\"hljs-attr\">status</span>: { <span class=\"hljs-attr\">$in</span>: [<span class=\"hljs-string\">&#x27;review&#x27;</span>, <span class=\"hljs-string\">&#x27;published&#x27;</span>] }\n  })\n});\n</code></pre>\n<p>The example above says that article can be read if it's in review or published and its creation date is in the past or today. Before starting let's define simple class that represents <code>Article</code> entity.</p>\n<pre><code data-filename=\"entities.js\" class=\"language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Article</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">status, createdAt</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.status = status;\n    <span class=\"hljs-built_in\">this</span>.createdAt = createdAt;\n  }\n}\n</code></pre>\n<blockquote>\n<p>It's not mandatory to use classes, CASL perfectly works with plain javascript objects, see <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/subject-type-detection&quot;}\">Subject type detection</app-link> for details.</p>\n</blockquote>\n<p>Now we can test which articles user can read:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> ability <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Article } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./entities&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> today = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().setHours(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n<span class=\"hljs-keyword\">const</span> tomorrow = <span class=\"hljs-comment\">/* logic to calculate date for tomorrow */</span> ;\n\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-keyword\">new</span> Article(<span class=\"hljs-string\">&#x27;review&#x27;</span>, today)) <span class=\"hljs-comment\">// (1), true</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-keyword\">new</span> Article(<span class=\"hljs-string\">&#x27;published&#x27;</span>, today)) <span class=\"hljs-comment\">// (2), true</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-keyword\">new</span> Article(<span class=\"hljs-string\">&#x27;draft&#x27;</span>, today)) <span class=\"hljs-comment\">// (3), false</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-keyword\">new</span> Article(<span class=\"hljs-string\">&#x27;review&#x27;</span>, tomorrow)) <span class=\"hljs-comment\">// (4), false</span>\n</code></pre>\n<p><code>(1)</code> and <code>(2)</code> returns <code>true</code> because article's status is one of the specified and <code>today</code> less then the specified value in conditions.\n<code>(3)</code> fails because article's status is not listed inside <code>$in</code> operator and <code>(4)</code> fails because article's <code>createdAt</code> is in future.</p>\n<p>The same logic is applicable to other operators in conditions.</p>\n<h2 id=\"common-conditions\"><a name=\"common-conditions\" class=\"h-link\" href=\"#\"></a>Common conditions</h2>\n<p>This section describes the way to construct conditions for common cases.</p>\n<h3 id=\"match-one-of-few-items-in-a-scalar-property\"><a name=\"match-one-of-few-items-in-a-scalar-property\" class=\"h-link\" href=\"#\"></a>Match one of few items in a scalar property</h3>\n<p>Suppose we have an <code>Article</code> object which has a property <code>status</code>. We want to restrict the user to access only articles that are in few specific statuses.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">status</span>: { <span class=\"hljs-attr\">$in</span>: [<span class=\"hljs-string\">&#x27;published&#x27;</span>, <span class=\"hljs-string\">&#x27;inReview&#x27;</span>] } });\n});\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Article</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">title, status</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.title = title;\n    <span class=\"hljs-built_in\">this</span>.status = status;\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> article = <span class=\"hljs-keyword\">new</span> Article(<span class=\"hljs-string\">&#x27;CASL&#x27;</span>, <span class=\"hljs-string\">&#x27;published&#x27;</span>);\n<span class=\"hljs-built_in\">console</span>.log(ability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, article)); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h3 id=\"match-specified-item-in-an-array-property\"><a name=\"match-specified-item-in-an-array-property\" class=\"h-link\" href=\"#\"></a>Match specified item in an array property</h3>\n<p>Suppose we have an <code>Article</code> object which has a property <code>categories</code>. We want to restrict the user to access only articles in one specified category.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">categories</span>: <span class=\"hljs-string\">&#x27;javascript&#x27;</span> });\n});\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Article</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">title, categories</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.title = title;\n    <span class=\"hljs-built_in\">this</span>.categories = categories;\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> article = <span class=\"hljs-keyword\">new</span> Article(<span class=\"hljs-string\">&#x27;CASL&#x27;</span>, [<span class=\"hljs-string\">&#x27;javascript&#x27;</span>, <span class=\"hljs-string\">&#x27;acl&#x27;</span>]);\n<span class=\"hljs-built_in\">console</span>.log(ability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, article)); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h3 id=\"match-one-of-few-items-in-an-array-property\"><a name=\"match-one-of-few-items-in-an-array-property\" class=\"h-link\" href=\"#\"></a>Match one of few items in an array property</h3>\n<p>Suppose we have an <code>Article</code> object which has a property <code>categories</code>. We want to restrict the user to access only articles in few specified categories.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">categories</span>: { <span class=\"hljs-attr\">$in</span>: [<span class=\"hljs-string\">&#x27;javascript&#x27;</span>, <span class=\"hljs-string\">&#x27;frontend&#x27;</span>] } });\n});\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Article</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">title, categories</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.title = title;\n    <span class=\"hljs-built_in\">this</span>.categories = categories;\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> article = <span class=\"hljs-keyword\">new</span> Article(<span class=\"hljs-string\">&#x27;CASL&#x27;</span>, [<span class=\"hljs-string\">&#x27;javascript&#x27;</span>, <span class=\"hljs-string\">&#x27;acl&#x27;</span>]);\n<span class=\"hljs-built_in\">console</span>.log(ability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, article)); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h3 id=\"match-nested-property-value\"><a name=\"match-nested-property-value\" class=\"h-link\" href=\"#\"></a>Match nested property value</h3>\n<p>Suppose we have an <code>Address</code> object which has property <code>country</code> which is an object of 2 fields: <code>isoCode</code> and <code>name</code>. We want to restrict user to access only those addresses that are located in the specified country.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Address&#x27;</span>, { <span class=\"hljs-string\">&#x27;country.isoCode&#x27;</span>: <span class=\"hljs-string\">&#x27;UA&#x27;</span> });\n});\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Address</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">isoCode, name</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.country = {\n      <span class=\"hljs-attr\">isoCode</span>: isoCode,\n      <span class=\"hljs-attr\">name</span>: name,\n    }\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> address = <span class=\"hljs-keyword\">new</span> Address(<span class=\"hljs-string\">&#x27;UA&#x27;</span>, <span class=\"hljs-string\">&#x27;Ukraine&#x27;</span>);\n<span class=\"hljs-built_in\">console</span>.log(ability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, address)); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h3 id=\"match-several-properties-of-a-nested-array-property\"><a name=\"match-several-properties-of-a-nested-array-property\" class=\"h-link\" href=\"#\"></a>Match several properties of a nested array property</h3>\n<p>Suppose we have a wishlist of products in some e-shop and we want to share wishlist item to somebody else and give him <code>update</code> permission.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> user = { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> };\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;WishlistItem&#x27;</span>, {\n    <span class=\"hljs-attr\">sharedWith</span>: {\n      <span class=\"hljs-attr\">$elemMatch</span>: { <span class=\"hljs-attr\">permission</span>: <span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-attr\">userId</span>: user.id }\n    }\n  });\n});\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WishlistItem</span> </span>{\n  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">title, sharedWith</span>)</span> {\n    <span class=\"hljs-built_in\">this</span>.title = title;\n    <span class=\"hljs-built_in\">this</span>.sharedWith = sharedWith;\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> wishlistItem = <span class=\"hljs-keyword\">new</span> WishlistItem(<span class=\"hljs-string\">&#x27;CASL in Action&#x27;</span>, [\n  { <span class=\"hljs-attr\">permission</span>: <span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-attr\">userId</span>: <span class=\"hljs-number\">2</span> },\n  { <span class=\"hljs-attr\">permission</span>: <span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-attr\">userId</span>: <span class=\"hljs-number\">1</span> },\n]);\nability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, wishlistItem); <span class=\"hljs-comment\">// true</span>\n</code></pre>","headings":[{"id":"mongo-db-and-its-query-language","title":"MongoDB and its query language"},{"id":"supported-operators","title":"Supported operators"},{"id":"why-logical-query-operators-are-not-included","title":"Why logical query operators are not included"},{"id":"checking-logic-in-casl","title":"Checking logic in CASL"},{"id":"common-conditions","title":"Common conditions"},{"id":"match-one-of-few-items-in-a-scalar-property","title":"Match one of few items in a scalar property"},{"id":"match-specified-item-in-an-array-property","title":"Match specified item in an array property"},{"id":"match-one-of-few-items-in-an-array-property","title":"Match one of few items in an array property"},{"id":"match-nested-property-value","title":"Match nested property value"},{"id":"match-several-properties-of-a-nested-array-property","title":"Match several properties of a nested array property"}],"id":"guide/conditions-in-depth"}