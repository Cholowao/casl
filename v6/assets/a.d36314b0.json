{"title":"TypeScript Support","categories":["advanced"],"order":60,"meta":{"keywords":null,"description":null},"content":"<p>CASL is written in <a href=\"https://typescriptlang.org/\" target=\"_blank\" rel=\"noopener nofollow\">TypeScript</a> and this brings several benefits:</p>\n<ul>\n<li>better safety as you can control what actions and subjects can be used</li>\n<li>better IDE integration as you can get hints on what classes you can use and arguments you need to pass inside</li>\n<li>easier library support, we can forget about synchronization issues between <code>.d.ts</code> and <code>.js</code> files</li>\n</ul>\n<p>So, let's play around with them</p>\n<blockquote>\n<p>Minimum supported TypeScript version is <strong>3.8.3</strong>. CASL uses <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-and-export\" target=\"_blank\" rel=\"noopener nofollow\"><code>export type</code> syntax</a></p>\n</blockquote>\n<h2 id=\"permissions-inference\"><a name=\"permissions-inference\" class=\"h-link\" href=\"#\"></a>Permissions inference</h2>\n<p><code>Ability</code> class accepts 2 <strong>optional</strong> generic parameters:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability, Subject, MongoQuery } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">type</span> PossibleAbilities = [<span class=\"hljs-built_in\">string</span>, Subject];\n<span class=\"hljs-keyword\">type</span> Conditions = MongoQuery;\n\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> Ability&lt;PossibleAbilities, Conditions&gt;();\n</code></pre>\n<blockquote>\n<p><code>Subject</code> is a special type that represents all possible subjects that <code>Ability</code> can accept. So, it's <code>object | string | Function | undefined</code>.</p>\n</blockquote>\n<p>Don't be scared by the complexity, <code>Ability</code> uses that types by default, so the example above is the same as the one below:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> Ability();\n</code></pre>\n<p>These types are enough to protect you from passing wrong arguments but you can go further and make them even stricter. To illustrate how, let's consider a blog application, which has <code>User</code>, <code>Article</code> and <code>Comment</code> entities with the next user's permissions:</p>\n<ul>\n<li>can <code>create</code>, <code>update</code>, <code>delete</code> own <code>Article</code> or <code>Comment</code></li>\n<li>can <code>read</code> any <code>Article</code>, any <code>Comment</code> and any <code>User</code></li>\n</ul>\n<p>So, let's translate this to CASL by specifying all possible actions and all possible subjects as generic parameters:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">type</span> Actions = <span class=\"hljs-string\">&#x27;create&#x27;</span> | <span class=\"hljs-string\">&#x27;read&#x27;</span> | <span class=\"hljs-string\">&#x27;update&#x27;</span> | <span class=\"hljs-string\">&#x27;delete&#x27;</span>;\n<span class=\"hljs-keyword\">type</span> Subjects = <span class=\"hljs-string\">&#x27;Article&#x27;</span> | <span class=\"hljs-string\">&#x27;Comment&#x27;</span> | <span class=\"hljs-string\">&#x27;User&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> Ability&lt;[Actions, Subjects]&gt;();\n</code></pre>\n<p>If you try to type <code>ability.can(</code> in <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener nofollow\">VSCode</a> (or other TypeScript supported IDEs), it provides hints:</p>\n<p><img src=\"/v6/images/casl-action-hints.png\" alt=\"CASL TypeScript action hints\" width=\"626\" height=\"124\"></p>\n<p>The same happens when you try to specify the 2nd argument:</p>\n<p><img src=\"/v6/images/casl-subject-hints.png\" alt=\"CASL TypeScript subject hints\" width=\"760\" height=\"144\"></p>\n<p>The same behavior works for <code>AbilityBuilder</code> and <code>defineAbility</code> function:</p>\n<p><img src=\"/v6/images/casl-abilitybuilder.png\" alt=\"CASL TypeScript AbilityBuilder hints\" width=\"619\" height=\"282\"></p>\n<h2 id=\"infer-subject-types-from-interfaces-and-classes\"><a name=\"infer-subject-types-from-interfaces-and-classes\" class=\"h-link\" href=\"#\"></a>Infer subject types from interfaces and classes</h2>\n<p>You can also specify interfaces as subjects:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">interface</span> Article {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">authorId</span>: <span class=\"hljs-built_in\">number</span>\n}\n\n<span class=\"hljs-keyword\">interface</span> User {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>\n}\n\n<span class=\"hljs-keyword\">interface</span> Comment {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>\n  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">authorId</span>: <span class=\"hljs-built_in\">number</span>\n}\n\n<span class=\"hljs-keyword\">type</span> Action = <span class=\"hljs-string\">&#x27;create&#x27;</span> | <span class=\"hljs-string\">&#x27;read&#x27;</span> | <span class=\"hljs-string\">&#x27;update&#x27;</span> | <span class=\"hljs-string\">&#x27;delete&#x27;</span>;\n<span class=\"hljs-keyword\">type</span> Subject = Article | Comment | User | <span class=\"hljs-string\">&#x27;Article&#x27;</span> | <span class=\"hljs-string\">&#x27;User&#x27;</span> | <span class=\"hljs-string\">&#x27;Comment&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> Ability&lt;[Action, Subject]&gt;();\n\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>);\nability.can(<span class=\"hljs-string\">&#x27;write&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>); <span class=\"hljs-comment\">// error because non-existing action name</span>\nability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Coment&#x27;</span>) <span class=\"hljs-comment\">// error because of typo</span>\n</code></pre>\n<p>and classes:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Article</span> </span>{\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">authorId</span>: <span class=\"hljs-built_in\">number</span>\n}\n\n<span class=\"hljs-keyword\">type</span> Action = <span class=\"hljs-string\">&#x27;create&#x27;</span> | <span class=\"hljs-string\">&#x27;read&#x27;</span> | <span class=\"hljs-string\">&#x27;update&#x27;</span> | <span class=\"hljs-string\">&#x27;delete&#x27;</span>;\n<span class=\"hljs-keyword\">type</span> Subject = <span class=\"hljs-keyword\">typeof</span> Article | Article;\n\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> Ability&lt;[Action, Subject]&gt;();\n\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, Article);\nability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-keyword\">new</span> Article());\n</code></pre>\n<p>This may be a bit routine to specify all possible subject types, especially if you have more than 3 of them. To make it easier, CASL provide <code>InferSubjects</code> typescript helper which can infer subjects from <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#discriminated-unions\" target=\"_blank\" rel=\"noopener nofollow\">tagged union</a>s (this helper checks <code>kind</code> and special <code>__caslSubjectType__</code> properties in order to determine the tag)</p>\n<blockquote>\n<p><code>__caslSubjectType__</code> is set by <code>subject</code> helper, to learn more check <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/subject-type-detection&quot;}\">Subject type detection</app-link></p>\n</blockquote>\n<p><img src=\"/v6/images/casl-tagged-union-subject.png\" alt=\"CASL TypeScript infer tagged union subject\" width=\"560\" height=\"382\"></p>\n<p>classes</p>\n<p><img src=\"/v6/images/casl-class-subject.png\" alt=\"CASL TypeScript infer class subject\" width=\"845\" height=\"404\"></p>\n<p>and even discriminated classes (you need to pass <code>true</code> to the 2nd generic parameter of <code>InferSubjects</code>).</p>\n<p><img src=\"/v6/images/casl-discriminated-class-subject.png\" alt=\"CASL TypeScript infer discriminated class subject\" width=\"663\" height=\"231\"></p>\n<p>The same parameter allows to infer <code>modelName</code> static property from classes (in case you want to use strings and not classes to check on subject type)</p>\n<p><img src=\"/v6/images/casl-class-subject-with-name.png\" alt=\"CASL TypeScript infer class modelName\" width=\"554\" height=\"234\"></p>\n<p>Moreover, the same behavior also works in complementary packages! So, you will get hints for React's <code>Can</code> component, Vue's <code>$can</code> function, Mongoose's plugins and others.</p>\n<blockquote>\n<p>To learn more, read docs for a complementary package for of your choice</p>\n</blockquote>\n<p>But even this is not the end and you can go even further!</p>\n<h2 id=\"safer-permissions-inference\"><a name=\"safer-permissions-inference\" class=\"h-link\" href=\"#\"></a>Safer permissions inference</h2>\n<p>For the most cases the suggested approach above should be enough but if you prefer to ensure extreme type safety, you can define dependencies between actions and subjects. For example, user can only read information about users in your app and nothing more but can manage articles:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">type</span> CRUD = <span class=\"hljs-string\">&#x27;create&#x27;</span> | <span class=\"hljs-string\">&#x27;read&#x27;</span> | <span class=\"hljs-string\">&#x27;update&#x27;</span> | <span class=\"hljs-string\">&#x27;delete&#x27;</span>;\n<span class=\"hljs-keyword\">type</span> Abilities = [<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>] | [CRUD, <span class=\"hljs-string\">&#x27;Article&#x27;</span>];\n\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> Ability&lt;Abilities&gt;();\n\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>);\nability.can(<span class=\"hljs-string\">&#x27;create&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>); <span class=\"hljs-comment\">// build time error! because it&#x27;s not allowed to create users</span>\n</code></pre>\n<h2 id=\"application-ability\"><a name=\"application-ability\" class=\"h-link\" href=\"#\"></a>Application Ability</h2>\n<p>From the first sight, it looks like that in order to use safer generic parameters, your app's code will become more complicated and this is true. But there is an escape hatch - <strong>Companion object pattern</strong>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability, AbilityClass } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">type</span> CRUD = <span class=\"hljs-string\">&#x27;create&#x27;</span> | <span class=\"hljs-string\">&#x27;read&#x27;</span> | <span class=\"hljs-string\">&#x27;update&#x27;</span> | <span class=\"hljs-string\">&#x27;delete&#x27;</span>;\n<span class=\"hljs-keyword\">type</span> Abilities = [<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>] | [CRUD, <span class=\"hljs-string\">&#x27;Article&#x27;</span>];\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> AppAbility = Ability&lt;Abilities&gt;;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> AppAbility = Ability <span class=\"hljs-keyword\">as</span> AbilityClass&lt;AppAbility&gt;;\n</code></pre>\n<p>This simple pattern comes to TypeScript from Scala, and it's a way to pair together types and objects. In TypeScript, values and types live in a separate namespaces, this allows to use the same name for a type and a class. TypeScript understands which one to use based on the context.</p>\n<h2 id=\"ability-builder-type-inference\"><a name=\"ability-builder-type-inference\" class=\"h-link\" href=\"#\"></a>AbilityBuilder type inference</h2>\n<p><code>AbilityBuilder</code> constructor accepts the single argument which is a type of <code>Ability</code> we want to build:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { AbilityBuilder, Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> builder = <span class=\"hljs-keyword\">new</span> AbilityBuilder(Ability);\n</code></pre>\n<blockquote>\n<p>Starting from v5, <code>AbilityBuilder</code> accepts required parameter, <code>Ability</code> class to build</p>\n</blockquote>\n<p>Thanks to this <code>AbilityBuilder</code> can infer all needed types from <code>Ability</code> types. This is especially useful when we define <code>AppAbility</code> because then we will have IDE hints and type safety for:</p>\n<ul>\n<li>specified action</li>\n<li>specified subject type</li>\n<li><strong>properties used in conditions</strong></li>\n<li><strong>specified fields</strong></li>\n</ul>\n<p>We can use either tagged interfaces (supports <code>kind</code>, <code>__typename</code> and <code>__caslSubjectType__</code> tag fields) or classes:</p>\n<p><img src=\"/v6/images/casl-abilitybuilder-conditions-hints.png\" alt=\"CASL TypeScript: AbilityBuilder conditions hints\" width=\"572\" height=\"418\"></p>\n<p><img src=\"/v6/images/casl-abilitybuilder-fields-hints.png\" alt=\"CASL TypeScript: AbilityBuilder fields hints\" width=\"721\" height=\"146\"></p>\n<p>The cool thing is that all that safety is subject type dependent! Try to pass <code>User</code> subject type in place of <code>Post</code> and see it by yourself!</p>\n<h3 id=\"nested-fields-with-dot-notation\"><a name=\"nested-fields-with-dot-notation\" class=\"h-link\" href=\"#\"></a>Nested fields with dot notation</h3>\n<p>If we need to define conditions based on nested fields, we can do this by defining a separate interface:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability, AbilityClass } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">interface</span> User {\n  <span class=\"hljs-attr\">kind</span>: <span class=\"hljs-string\">&#x27;User&#x27;</span>\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">address</span>: {\n    <span class=\"hljs-attr\">street</span>: <span class=\"hljs-built_in\">string</span>\n    <span class=\"hljs-attr\">building</span>: <span class=\"hljs-built_in\">string</span>\n  }\n}\n\n<span class=\"hljs-keyword\">type</span> AppAbility = Ability&lt;[<span class=\"hljs-string\">&#x27;read&#x27;</span>, User | <span class=\"hljs-string\">&#x27;User&#x27;</span>]&gt;;\n<span class=\"hljs-keyword\">const</span> AppAbility = Ability <span class=\"hljs-keyword\">as</span> AbilityClass&lt;AppAbility&gt;;\n\n<span class=\"hljs-keyword\">const</span> { can } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(AppAbility);\n\n<span class=\"hljs-keyword\">type</span> FlatUser = User &amp; {\n  <span class=\"hljs-string\">&#x27;address.street&#x27;</span>: User[<span class=\"hljs-string\">&#x27;address&#x27;</span>][<span class=\"hljs-string\">&#x27;street&#x27;</span>]\n};\n\ncan&lt;FlatUser&gt;(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>, { <span class=\"hljs-string\">&#x27;address.street&#x27;</span>: <span class=\"hljs-string\">&#x27;test&#x27;</span> });\n<span class=\"hljs-comment\">// It also works for fields</span>\ncan&lt;FlatUser&gt;(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>, [<span class=\"hljs-string\">&#x27;address.street&#x27;</span>], { <span class=\"hljs-string\">&#x27;address.street&#x27;</span>: <span class=\"hljs-string\">&#x27;test&#x27;</span> })\n</code></pre>\n<h2 id=\"useful-type-helpers\"><a name=\"useful-type-helpers\" class=\"h-link\" href=\"#\"></a>Useful type helpers</h2>\n<h3 id=\"raw-rule\"><a name=\"raw-rule\" class=\"h-link\" href=\"#\"></a>RawRule</h3>\n<p>Sometimes you may need to create <code>RawRule</code>s manually (or fetch them from db). In that case, you will need to type them explicitly. Use <code>RawRuleOf&lt;AppAbility&gt;</code> in case if you have type for <code>AppAbility</code> or <code>RawRuleFrom&lt;Abilities, Conditions&gt;</code> otherwise.</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { Ability, RawRuleOf, RawRuleFrom, MongoQuery } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">type</span> AppAbilities = [<span class=\"hljs-string\">&#x27;read&#x27;</span> | <span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>];\n<span class=\"hljs-keyword\">type</span> AppAbility = Ability&lt;AppAbilities&gt;;\n\n<span class=\"hljs-keyword\">const</span> rawRules: RawRuleOf&lt;AppAbility&gt;[] = [\n  { <span class=\"hljs-attr\">action</span>: <span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;Article&#x27;</span> }\n];\n\n<span class=\"hljs-comment\">// or</span>\n<span class=\"hljs-keyword\">type</span> AppRawRule = RawRuleFrom&lt;AppAbilities, MongoQuery&gt;;\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getRulesFromDb</span>(<span class=\"hljs-params\"></span>): <span class=\"hljs-title\">Promise</span>&lt;<span class=\"hljs-title\">AppRawRule</span>[]&gt; </span>{\n  <span class=\"hljs-comment\">// implementation</span>\n}\n</code></pre>\n<h3 id=\"rule-of\"><a name=\"rule-of\" class=\"h-link\" href=\"#\"></a>RuleOf</h3>\n<p>Similar to <code>RawRule</code> helpers, there is a helper <code>RuleOf&lt;Ability&gt;</code> for <code>Rule&lt;Abilities, Conditions&gt;</code>. It's very unlikely that you will need to work with this types on application layer.</p>\n<h3 id=\"ability-options-of\"><a name=\"ability-options-of\" class=\"h-link\" href=\"#\"></a>AbilityOptionsOf</h3>\n<p>Similar to <code>RawRule</code>, if you don't want to explicitly use <code>AbilityOptions&lt;Abilities, Conditions&gt;</code>, you can use <code>AbilityOptionsOf&lt;Ability&gt;</code>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { AbilityOptionsOf, Ability } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">type</span> AppAbilities = [<span class=\"hljs-string\">&#x27;read&#x27;</span> | <span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>];\n<span class=\"hljs-keyword\">type</span> AppAbility = Ability&lt;AppAbilities&gt;;\n<span class=\"hljs-keyword\">const</span> options: AbilityOptionsOf&lt;AppAbility&gt; = {\n  <span class=\"hljs-attr\">detectSubjectType</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">subject</span>) =&gt;</span> <span class=\"hljs-comment\">/* custom implementation */</span>\n};\n\n<span class=\"hljs-keyword\">const</span> ability = <span class=\"hljs-keyword\">new</span> Ability&lt;AppAbilities&gt;([], options);\n</code></pre>\n<h3 id=\"any-ability-and-any-mongo-ability\"><a name=\"any-ability-and-any-mongo-ability\" class=\"h-link\" href=\"#\"></a>AnyAbility and AnyMongoAbility</h3>\n<p>These 2 types represents any <code>PureAbility</code> instance and any <code>Ability</code> instance. They are usually a good fit for restrictions in generic types. For example, this is how <code>AnyAbility</code> is used in <code>AbilityBuilder</code>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AbilityBuilder</span>&lt;<span class=\"hljs-title\">T</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AnyAbility</span> </span>= AnyAbility&gt; {\n  <span class=\"hljs-comment\">// implementation details</span>\n}\n</code></pre>\n<h3 id=\"mongo-query\"><a name=\"mongo-query\" class=\"h-link\" href=\"#\"></a>MongoQuery</h3>\n<p>There are 2 types that represents built-in mongo operators:</p>\n<ul>\n<li><code>MongoQuery&lt;T&gt;</code> is an actual mongo query.<br>\nIs used as a conditions restriction in <code>Ability</code> class. Actually <code>Ability</code> is a <code>PureAbility</code> with conditions being restricted to <code>MongoQuery</code>.</li>\n<li><code>MongoQueryOperators&lt;T&gt;</code> represents supported MongoDB operators and it's a union of <code>MongoQueryFieldOperators&lt;T&gt;</code> and <code>MongoQueryTopLevelOperators&lt;T&gt;</code> that represent supported field and document level operators respectively</li>\n</ul>\n<h3 id=\"forced-subject\"><a name=\"forced-subject\" class=\"h-link\" href=\"#\"></a>ForcedSubject</h3>\n<p>Represents an object (i.e., POJO) that has been casted to specific subject by using <code>subject</code> helper.</p>\n<blockquote>\n<p>See <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/subject-type-detection&quot;}\" hash=\"subject-helper\">Subject type detection</app-link> for details</p>\n</blockquote>","headings":[{"id":"permissions-inference","title":"Permissions inference"},{"id":"infer-subject-types-from-interfaces-and-classes","title":"Infer subject types from interfaces and classes"},{"id":"safer-permissions-inference","title":"Safer permissions inference"},{"id":"application-ability","title":"Application Ability"},{"id":"ability-builder-type-inference","title":"AbilityBuilder type inference"},{"id":"nested-fields-with-dot-notation","title":"Nested fields with dot notation"},{"id":"useful-type-helpers","title":"Useful type helpers"},{"id":"raw-rule","title":"RawRule"},{"id":"rule-of","title":"RuleOf"},{"id":"ability-options-of","title":"AbilityOptionsOf"},{"id":"any-ability-and-any-mongo-ability","title":"AnyAbility and AnyMongoAbility"},{"id":"mongo-query","title":"MongoQuery"},{"id":"forced-subject","title":"ForcedSubject"}],"id":"advanced/typescript"}