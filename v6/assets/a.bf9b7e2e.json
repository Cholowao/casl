{"title":"Roles with predefined permissions","categories":["cookbook"],"order":20,"meta":{"keywords":null,"description":null},"content":"<blockquote>\n<p>This recipe targets backend developers. We use <a href=\"https://www.typescriptlang.org\" target=\"_blank\" rel=\"noopener nofollow\">TypeScript</a> and <a href=\"https://en.wikipedia.org/wiki/Relational_database\" target=\"_blank\" rel=\"noopener nofollow\">RDBMS</a> in this guide, so the basic knowledge of both is required.</p>\n</blockquote>\n<h2 id=\"the-issue\"><a name=\"the-issue\" class=\"h-link\" href=\"#\"></a>The issue</h2>\n<p>The application can be used by multiple users with different roles. Each role has predefined set of permissions.</p>\n<blockquote>\n<p>This is also known as <a href=\"https://searchsecurity.techtarget.com/definition/role-based-access-control-RBAC\" target=\"_blank\" rel=\"noopener nofollow\">RBAC (Role based access control)</a>.</p>\n</blockquote>\n<h2 id=\"the-solution\"><a name=\"the-solution\" class=\"h-link\" href=\"#\"></a>The solution</h2>\n<p>First of all, we need to define tables for <code>users</code> and <code>roles</code>. <code>users</code> table stores <code>id</code>, <code>email</code>, <code>password</code> and <code>roleId</code>. <code>roles</code> table stores only <code>id</code> and <code>name</code>.</p>\n<blockquote>\n<p>Tables' structure may be different in your application. We are going to use the simplest but sufficient structure to solve <a href=\"#the-issue\">The issue</a></p>\n</blockquote>\n<p>As our roles has a predefined set of permissions which are not required to be changeable in runtime, we are going to define role permissions in the code. For each role we will have a separate function. Then depending on the role name, we will call that function to define permissions and create <code>Ability</code> instance. Using <code>Ability</code> instance we can guarantee that a user can do only what his role allows him to do.</p>\n<blockquote>\n<p>In the next Demo, we are not going to implement REST API as the main intention of this recipe is to solve <a href=\"#the-issue\">The issue</a>.</p>\n</blockquote>\n<h2 id=\"demo\"><a name=\"demo\" class=\"h-link\" href=\"#\"></a>Demo</h2>\n<p>To make things simple, we will use SQLite database. This also allows to quickly setup the demo on local machine and even run it in a browser.</p>\n<p>The demo domain is very simple, this is an app that allows to invite users. This app has 2 roles:</p>\n<ul>\n<li><code>member</code> user can\n<ul>\n<li>invite any user</li>\n<li>update information about himself</li>\n</ul>\n</li>\n<li><code>admin</code> user can\n<ul>\n<li>manage everything</li>\n</ul>\n</li>\n</ul>\n<p>In order to start, we need to create a migration script for <code>users</code> and <code>roles</code> tables and seed our database with default records. To do this, we will use <a href=\"http://knexjs.org/\" target=\"_blank\" rel=\"noopener nofollow\">knex</a> SQL builder.</p>\n<blockquote>\n<p>We are not going to walk through knex's API and usage, so if you are not familiar with it, take some time to look through its documentation. Anyway, don't worry, it's quite expressive.</p>\n</blockquote>\n<details>\n<summary>Initial migration</summary>\n<pre><code data-filename=\"migrations/20200401110244_init.js\" class=\"language-js\"><span class=\"hljs-built_in\">exports</span>.up = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">knex</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> knex.schema\n    .createTable(<span class=\"hljs-string\">&#x27;users&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">table</span>) =&gt;</span> {\n      table.increments(<span class=\"hljs-string\">&#x27;id&#x27;</span>);\n      table.string(<span class=\"hljs-string\">&#x27;email&#x27;</span>, <span class=\"hljs-number\">255</span>).notNullable();\n      table.string(<span class=\"hljs-string\">&#x27;password&#x27;</span>, <span class=\"hljs-number\">50</span>).notNullable();\n      table.integer(<span class=\"hljs-string\">&#x27;roleId&#x27;</span>).unsigned().notNullable();\n\n      table.foreign(<span class=\"hljs-string\">&#x27;roleId&#x27;</span>).references(<span class=\"hljs-string\">&#x27;id&#x27;</span>).inTable(<span class=\"hljs-string\">&#x27;roles&#x27;</span>);\n    })\n    .createTable(<span class=\"hljs-string\">&#x27;roles&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">table</span>) =&gt;</span> {\n      table.increments(<span class=\"hljs-string\">&#x27;id&#x27;</span>);\n      table.string(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-number\">255</span>).notNullable();\n    });\n};\n\n<span class=\"hljs-built_in\">exports</span>.down = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">knex</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> knex.schema\n      .dropTable(<span class=\"hljs-string\">&#x27;users&#x27;</span>)\n      .dropTable(<span class=\"hljs-string\">&#x27;roles&#x27;</span>);\n};\n</code></pre>\n</details>\n<details>\n<summary>Initial seeds</summary>\n<pre><code data-filename=\"seeds/init.js\" class=\"language-js\"><span class=\"hljs-built_in\">exports</span>.seed = <span class=\"hljs-keyword\">async</span> (knex) =&gt; {\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all([\n    knex(<span class=\"hljs-string\">&#x27;users&#x27;</span>).del(),\n    knex(<span class=\"hljs-string\">&#x27;roles&#x27;</span>).del()\n  ]);\n  <span class=\"hljs-keyword\">await</span> knex(<span class=\"hljs-string\">&#x27;roles&#x27;</span>).insert([\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;admin&#x27;</span> },\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;member&#x27;</span> }\n  ]);\n  <span class=\"hljs-keyword\">await</span> knex(<span class=\"hljs-string\">&#x27;users&#x27;</span>).insert([\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;admin@casl.io&#x27;</span>, <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;123456&#x27;</span>, <span class=\"hljs-attr\">roleId</span>: <span class=\"hljs-number\">1</span> },\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;member@casl.io&#x27;</span>, <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;123456&#x27;</span>, <span class=\"hljs-attr\">roleId</span>: <span class=\"hljs-number\">2</span> },\n  ]);\n};\n</code></pre>\n</details>\n<p>Now, let's define all possible actions and subjects.</p>\n<h3 id=\"abilities\"><a name=\"abilities\" class=\"h-link\" href=\"#\"></a>Abilities</h3>\n<p>This app has only <code>User</code> subject, users can only <code>update</code> himself and invite other users, so:</p>\n<pre><code data-filename=\"appAbility.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { Ability, ForcedSubject, AbilityClass } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> actions = [<span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-string\">&#x27;invite&#x27;</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">const</span>;\n<span class=\"hljs-keyword\">const</span> subjects = [<span class=\"hljs-string\">&#x27;User&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">const</span>;\n<span class=\"hljs-keyword\">type</span> AppAbilities = [\n  <span class=\"hljs-keyword\">typeof</span> actions[<span class=\"hljs-built_in\">number</span>],\n  <span class=\"hljs-keyword\">typeof</span> subjects[<span class=\"hljs-built_in\">number</span>] | ForcedSubject&lt;Exclude&lt;<span class=\"hljs-keyword\">typeof</span> subjects[<span class=\"hljs-built_in\">number</span>], <span class=\"hljs-string\">&#x27;all&#x27;</span>&gt;&gt;\n];\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> AppAbility = Ability&lt;AppAbilities&gt;;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> AppAbility = Ability <span class=\"hljs-keyword\">as</span> AbilityClass&lt;AppAbility&gt;;\n</code></pre>\n<blockquote>\n<p>See <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/typescript&quot;}\" hash=\"useful-type-helpers\">TypeScript support</app-link> to get details about type helpers.</p>\n</blockquote>\n<p><code>typeof actions[number]</code> converts readonly array into union of its values, this allows to reuse actions and subjects defined in value scope inside type scope.</p>\n<p>Having all possible subjects and actions, we can define roles' permissions in the same file:</p>\n<pre><code data-filename=\"appAbility.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { Ability, ForcedSubject, AbilityBuilder, AbilityClass } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { User } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../models/User&#x27;</span>;\n\n<span class=\"hljs-comment\">// abilities definition from previous example</span>\n\n<span class=\"hljs-keyword\">type</span> DefinePermissions = <span class=\"hljs-function\">(<span class=\"hljs-params\">user: User, builder: AbilityBuilder&lt;AppAbility&gt;</span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>;\n<span class=\"hljs-keyword\">type</span> Roles = <span class=\"hljs-string\">&#x27;member&#x27;</span> | <span class=\"hljs-string\">&#x27;admin&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> rolePermissions: Record&lt;Roles, DefinePermissions&gt; = {\n  <span class=\"hljs-function\"><span class=\"hljs-title\">member</span>(<span class=\"hljs-params\">user, { can }</span>)</span> {\n    can(<span class=\"hljs-string\">&#x27;invite&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>);\n    can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;User&#x27;</span>, { <span class=\"hljs-attr\">id</span>: user.id });\n  },\n  <span class=\"hljs-function\"><span class=\"hljs-title\">admin</span>(<span class=\"hljs-params\">user, { can }</span>)</span> {\n    can(<span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>);\n  }\n};\n</code></pre>\n<blockquote>\n<p>Do you see how readable this definition object is? The function signature says &quot;member user can&quot; and the body describes what the member user can do. Looks very similar to how we described our requirements at the beginning of <a href=\"#demo\">Demo</a> section, don't it?</p>\n</blockquote>\n<p>We imported <code>User</code> data class in order to make our functions a bit more strongly typed, its shape is the following:</p>\n<pre><code data-filename=\"models/User.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> User {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>\n  <span class=\"hljs-attr\">email</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">password</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">role</span>: <span class=\"hljs-built_in\">string</span>\n}\n</code></pre>\n<blockquote>\n<p>We created <code>rolePermissions</code> object that holds our permission definitions functions instead of using regular functions. This allows us to retrieve role specific function by accessing properties of this object, this is very convenient and efficient.</p>\n</blockquote>\n<p>Finally, let's create a function that defines <code>Ability</code> instance for our user, let's do this in the same file:</p>\n<pre><code data-filename=\"services/appAbility.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { Ability, ForcedSubject, AbilityBuilder } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { User } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../models/User&#x27;</span>;\n\n<span class=\"hljs-comment\">// abilities definition from the example above</span>\n<span class=\"hljs-comment\">// roles definition from the example above</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineAbilityFor</span>(<span class=\"hljs-params\">user: User</span>): <span class=\"hljs-title\">AppAbility</span> </span>{\n  <span class=\"hljs-keyword\">const</span> builder = <span class=\"hljs-keyword\">new</span> AbilityBuilder(Ability);\n\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> rolePermissions[user.role] === <span class=\"hljs-string\">&#x27;function&#x27;</span>) {\n    rolePermissions[user.role](user, builder);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">`Trying to use unknown role &quot;<span class=\"hljs-subst\">${user.role}</span>&quot;`</span>);\n  }\n\n  <span class=\"hljs-keyword\">return</span> builder.build();\n}\n</code></pre>\n<blockquote>\n<p>We need to ensure that permissions' definition function for a particular role exists because TypeScript can't help us to ensure that roles in the database reflects our types. So, we fail fast.</p>\n</blockquote>\n<h3 id=\"putting-together\"><a name=\"putting-together\" class=\"h-link\" href=\"#\"></a>Putting together</h3>\n<p>First of all, we need a function that returns a user by its email and another one that updates a user by its id:</p>\n<pre><code data-filename=\"services/users.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> db <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./db&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { User } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./models/User&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">findUserByEmail</span>(<span class=\"hljs-params\">email: <span class=\"hljs-built_in\">string</span></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> db&lt;User&gt;(<span class=\"hljs-string\">&#x27;users&#x27;</span>)\n    .select(<span class=\"hljs-string\">&#x27;users.id&#x27;</span>, <span class=\"hljs-string\">&#x27;users.email&#x27;</span>, { <span class=\"hljs-attr\">role</span>: <span class=\"hljs-string\">&#x27;roles.name&#x27;</span> })\n    .innerJoin(<span class=\"hljs-string\">&#x27;roles&#x27;</span>, <span class=\"hljs-string\">&#x27;roles.id&#x27;</span>, <span class=\"hljs-string\">&#x27;users.roleId&#x27;</span>)\n    .where(<span class=\"hljs-string\">&#x27;email&#x27;</span>, email)\n    .first();\n\n  <span class=\"hljs-keyword\">return</span> user;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> UserChanges = Partial&lt;Exclude&lt;User, <span class=\"hljs-string\">&#x27;role&#x27;</span> | <span class=\"hljs-string\">&#x27;id&#x27;</span>&gt;&gt;;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateUserById</span>(<span class=\"hljs-params\">id: <span class=\"hljs-built_in\">number</span>, changes: UserChanges</span>) </span>{\n  <span class=\"hljs-keyword\">await</span> db&lt;User&gt;(users)\n    .update(changes)\n    .where(<span class=\"hljs-string\">&#x27;id&#x27;</span>, id);\n}\n</code></pre>\n<p>Now we can implement <code>updateUserDetails</code> function:</p>\n<pre><code data-filename=\"updateUserDetails.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { ForbiddenError, subject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { defineAbilityFor } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./services/appAbility&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { findUserByEmail, updateUserById, UserChanges } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./services/users&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateUserDetails</span>(<span class=\"hljs-params\">\n  <span class=\"hljs-comment\">/** email of a user who initiates the request (i.e., logged in user) */</span>\n  initiatorEmail: <span class=\"hljs-built_in\">string</span>,\n  <span class=\"hljs-comment\">/** an email of user to be updated */</span>\n  userToBeUpdatedEmail: <span class=\"hljs-built_in\">string</span>,\n  <span class=\"hljs-comment\">/** an object of changes to be applied */</span>\n  changes: UserChanges\n</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> findUserByEmail(initiatorEmail);\n  <span class=\"hljs-keyword\">const</span> ability = defineAbilityFor(user);\n  <span class=\"hljs-keyword\">const</span> userToBeUpdated = userToBeUpdatedEmail === initiatorEmail\n    ? user\n    : <span class=\"hljs-keyword\">await</span> findUserByEmail(userToBeUpdatedEmail)\n\n  ForbiddenError.from(ability).throwUnlessCan(<span class=\"hljs-string\">&#x27;update&#x27;</span>, subject(<span class=\"hljs-string\">&#x27;User&#x27;</span>, userToBeUpdated));\n  <span class=\"hljs-keyword\">await</span> updateUserById(userToBeUpdated.id, changes);\n}\n</code></pre>\n<blockquote>\n<p>We intentionally made this function to accept both initiator and user whose details needs to be updated in order to show that permissions' logic works correctly. In real world apps, this function should accept only initiator and update his details!</p>\n</blockquote>\n<p>Let's go line by line in order to understand the code:</p>\n<ol>\n<li>We created <code>updateUserDetails</code> that accepts 3 arguments: 1st represents user's email who initiates the request (i.e., logged in user), 2nd is an email of a user whose details will be updated and 3rd is an object of changes.</li>\n<li>Inside the function, we find initiator user in order to create <code>Ability</code> instance for it.</li>\n<li>We also find user whose details needs to be updated, so we have his id.</li>\n<li>Using <code>ForbiddenError</code> class, we ensure that user can update own details. If not, a <code>ForbiddenError</code> will be thrown. Also pay attention that we call <code>subject</code> function. It assigns a particular subject type to a plain JavaScript object (see <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/subject-type-detection&quot;}\" hash=\"subject-helper\">subject helper</app-link> for details).</li>\n<li>We call <code>updateUserById</code> function to update user details by id in the database.</li>\n</ol>\n<p>To test this function, let's create a simple script:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { ForbiddenError } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { updateUserDetails } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./updateUserDetails&#x27;</span>;\n\nupdateUserDetails(<span class=\"hljs-string\">&#x27;member@casl.io&#x27;</span>, <span class=\"hljs-string\">&#x27;member@casl.io&#x27;</span>, { <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;654321&#x27;</span> })\n  .then(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;[member]: own details were successfully updated&#x27;</span>))\n  .catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (error <span class=\"hljs-keyword\">instanceof</span> ForbiddenError) {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;[member]: cannot update own details&#x27;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-built_in\">console</span>.error(error);\n    }\n  });\n\nupdateUserDetails(<span class=\"hljs-string\">&#x27;member@casl.io&#x27;</span>, <span class=\"hljs-string\">&#x27;admin@casl.io&#x27;</span>, { <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;654321&#x27;</span> })\n  .then(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;[member]: admin details were successfully updated&#x27;</span>))\n  .catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">error</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (error <span class=\"hljs-keyword\">instanceof</span> ForbiddenError) {\n      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;[member]: admin details are NOT ALLOWED to be updated&#x27;</span>);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-built_in\">console</span>.error(error);\n    }\n  });\n</code></pre>\n<p>If you run this code, you will get:</p>\n<pre><code class=\"hljs\">[<span class=\"hljs-symbol\">member</span>]: <span class=\"hljs-link\">own details were successfully updated</span>\n[<span class=\"hljs-symbol\">member</span>]: <span class=\"hljs-link\">admin details are NOT ALLOWED to be updated</span>\n</code></pre>\n<p>At this point, you have enough details to implement <code>inviteUser</code> function by yourself ;) So, we will just go through its logic:</p>\n<ol>\n<li><code>inviteUser</code> accepts 2 arguments: initiator's email and email of the user to be invited.</li>\n<li>Retrieve initiator user by its email.</li>\n<li>Check that initiator is allowed to invite a user.</li>\n<li>Check if the user to be invited has not been registered in the system before.</li>\n<li>If not, send an email to this user with invitation message.</li>\n</ol>\n<h3 id=\"conclusion\"><a name=\"conclusion\" class=\"h-link\" href=\"#\"></a>Conclusion</h3>\n<p>That's it! You now have a powerful role based access control powered by CASL! We hope this tutorial was helpful and made your understanding of CASL.js even better :)</p>\n<h2 id=\"alternative-patterns\"><a name=\"alternative-patterns\" class=\"h-link\" href=\"#\"></a>Alternative patterns</h2>\n<p>This pattern is very powerful and scales very good. Even if at some point in the future, you will need to allow users to change permissions dynamically (e.g., via REST API or User Interface), you can easily do this, read <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;cookbook/roles-with-persisted-permissions&quot;}\">Roles with persisted permissions</app-link> recipe for details.</p>\n<p>If you need to implement claim based permissions, check <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;cookbook/claim-authorization&quot;}\">Claim based Authorization</app-link> recipe.</p>","headings":[{"id":"the-issue","title":"The issue"},{"id":"the-solution","title":"The solution"},{"id":"demo","title":"Demo"},{"id":"abilities","title":"Abilities"},{"id":"putting-together","title":"Putting together"},{"id":"conclusion","title":"Conclusion"},{"id":"alternative-patterns","title":"Alternative patterns"}],"id":"cookbook/roles-with-static-permissions"}