{"title":"Less confusing can API","categories":["cookbook"],"order":15,"meta":{"keywords":null,"description":null},"content":"<h2 id=\"the-issue\"><a name=\"the-issue\" class=\"h-link\" href=\"#\"></a>The issue</h2>\n<p>CASL uses <code>can</code> and <code>cannot</code> function names to both define and check permissions. For some of you, it may look confusing and you would like to be more explicit and not rely on the execution context.</p>\n<p>Example:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-comment\">// define abilities</span>\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can, cannot</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>);\n  cannot(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>, { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> });\n});\n\n<span class=\"hljs-comment\">// check abilities</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>);\n</code></pre>\n<p><strong>The main disadvantage</strong> is that you need to remember the context and differences between function signatures of <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/intro&quot;}\"><code>can</code> that defines ability</app-link> and <code>can</code> that checks it.</p>\n<h2 id=\"the-solution\"><a name=\"the-solution\" class=\"h-link\" href=\"#\"></a>The solution</h2>\n<p>What we can do is to use different variables' names, so the example above looks this:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-comment\">// define abilities</span>\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">allow, forbid</span>) =&gt;</span> {\n  allow(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>);\n  forbid(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>, { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> });\n});\n\n<span class=\"hljs-comment\">// check abilities</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>);\n</code></pre>\n<p>The same example using pure <code>AbilityBuilder</code> can be written in similar way using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Assigning_to_new_variable_names\" target=\"_blank\" rel=\"noopener nofollow\">object-destructuring</a>:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { AbilityBuilder, createMongoAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-comment\">// define abilities</span>\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-attr\">can</span>: allow, <span class=\"hljs-attr\">cannot</span>: forbid, build } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(createMongoAbility);\n\nallow(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>);\nforbid(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>, { <span class=\"hljs-attr\">private</span>: <span class=\"hljs-literal\">true</span> });\n\n<span class=\"hljs-keyword\">const</span> ability = build();\n\n<span class=\"hljs-comment\">// check abilities</span>\nability.can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>);\n</code></pre>\n<p><strong>The main advantage</strong> is that everybody clearly sees that <code>allow</code> and <code>can</code> are different methods and potentially may have different signatures (because they different!).</p>\n<blockquote>\n<p>See <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/define-rules&quot;}\">Define rules</app-link> for other ways to define ability.</p>\n</blockquote>\n<h2 id=\"when-to-avoid\"><a name=\"when-to-avoid\" class=\"h-link\" href=\"#\"></a>When to avoid</h2>\n<p>This approach really makes it easy to work with CASL for junior developers and those who prefers explicit code over conventions or context. If contextual code doesn't bother you, you can avoid this.</p>","headings":[{"id":"the-issue","title":"The issue"},{"id":"the-solution","title":"The solution"},{"id":"when-to-avoid","title":"When to avoid"}],"id":"cookbook/less-confusing-can-api"}