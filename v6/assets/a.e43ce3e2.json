{"title":"Cache abilities","categories":["cookbook"],"order":20,"meta":{"keywords":null,"description":null},"content":"<blockquote>\n<p>This recipe targets backend developers. We use <a href=\"https://expressjs.com/\" target=\"_blank\" rel=\"noopener nofollow\">express</a> library in this guide, so its knowledge (or knowledge of similar framework) is required.</p>\n</blockquote>\n<h2 id=\"the-issue\"><a name=\"the-issue\" class=\"h-link\" href=\"#\"></a>The issue</h2>\n<p>It takes considerable amount of time or requires additional roundtrip to the database to construct a <code>PureAbility</code> instance.</p>\n<p>Let's consider an example where user can manage own devices but <strong>devices doesn't have</strong> a reference to the owner. In such cases, we need to fetch all device ids in order to create a <code>MongoAbility</code> instance:</p>\n<pre><code data-filename=\"defineAbility.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { AbilityBuilder, createMongoAbility, MongoAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { getDevicesOf } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../services/device&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> AppAbility = MongoAbility;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineRulesFor</span>(<span class=\"hljs-params\">user</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { can, rules } = <span class=\"hljs-keyword\">new</span> AbilityBuilder&lt;AppAbility&gt;(createMongoAbility);\n\n  <span class=\"hljs-keyword\">const</span> devices = <span class=\"hljs-keyword\">await</span> getDevicesOf(user);\n  <span class=\"hljs-keyword\">const</span> ids = devices.map(<span class=\"hljs-function\"><span class=\"hljs-params\">device</span> =&gt;</span> device.id);\n\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Device&#x27;</span>, { <span class=\"hljs-attr\">id</span>: { <span class=\"hljs-attr\">$in</span>: ids } });\n  <span class=\"hljs-comment\">// other rules</span>\n\n  <span class=\"hljs-keyword\">return</span> rules;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineAbilityFor</span>(<span class=\"hljs-params\">user</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> rules = <span class=\"hljs-keyword\">await</span> defineRulesFor(user);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> AppAbility(rules);\n}\n</code></pre>\n<blockquote>\n<p>The underlying database is not important for this guide. The same principles works for any other database system.</p>\n</blockquote>\n<h2 id=\"the-solution\"><a name=\"the-solution\" class=\"h-link\" href=\"#\"></a>The solution</h2>\n<p>To speed things up, you can cache creation of the ability instance.</p>\n<h2 id=\"demo\"><a name=\"demo\" class=\"h-link\" href=\"#\"></a>Demo</h2>\n<p>There are several ways to do this:</p>\n<blockquote>\n<p>Make sure that you wrap all async express middlewares in try/catch as express 4.x doesn't support <code>Promise</code> rejections. We don't do this in the examples below for the sake of simplicity.</p>\n</blockquote>\n<h3 id=\"in-memory-lru-cache\"><a name=\"in-memory-lru-cache\" class=\"h-link\" href=\"#\"></a>In memory LRU cache</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_Recently_Used_.28LRU.29\" target=\"_blank\" rel=\"noopener nofollow\">LRU cache</a> is a type of cache which discards least recently used entries, hence allows to store abilities for the most active users, that users who generate the highest load on your system.</p>\n<blockquote>\n<p>There is quite popular <a href=\"https://www.npmjs.com/package/lru-cache\" target=\"_blank\" rel=\"noopener nofollow\">lru-cache</a> Node.js package which we will use in this guide but you can use any other implementation the same way.</p>\n</blockquote>\n<p>So, let's create a middleware that defines abilities for <code>Request</code> object:</p>\n<pre><code data-filename=\"provideAbility.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> LruCache <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;lru-cache&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { defineAbilityFor } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility&#x27;</span>;\n\n<span class=\"hljs-comment\">// store abilities of 1000 most active users</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> ABILITIES_CACHE = <span class=\"hljs-keyword\">new</span> LruCache(<span class=\"hljs-number\">1000</span>);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">provideAbility</span>(<span class=\"hljs-params\">req, res, next</span>) </span>{\n  <span class=\"hljs-keyword\">if</span> (ABILITIES_CACHE.has(req.user.id)) {\n    req.ability = ABILITIES_CACHE.get(req.user.id);\n  } <span class=\"hljs-keyword\">else</span> {\n    req.ability = <span class=\"hljs-keyword\">await</span> defineAbilityFor(req.user);\n    ABILITIES_CACHE.set(req.user.id, req.ability);\n  }\n\n  next();\n}\n</code></pre>\n<p>Now we can use this middleware to provide abilities for a particular user and check its permissions:</p>\n<pre><code data-filename=\"boot.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { provideAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./provideAbility&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> express <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;express&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> app = express();\n\n<span class=\"hljs-comment\">// app configuration and other middlewares</span>\n\napp.use(provideAbility);\n\napp.listen(<span class=\"hljs-number\">3000</span>, <span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;app is listening on http://localhost:3000&#x27;</span>));\n</code></pre>\n<blockquote>\n<p>Don't forget to invalidate cache when user adds or removes devices</p>\n</blockquote>\n<h3 id=\"in-session-storage\"><a name=\"in-session-storage\" class=\"h-link\" href=\"#\"></a>In session storage</h3>\n<p>If the application uses stored sessions and <a href=\"#in-memory-lru-cache\">LRU cache</a> doesn't satisfy your needs, you can store abilities in user's session (e.g., Redis, Memcached). Why do we store rules and not <code>PureAbility</code> instance? Because session storage serializes object before storing it. Rules are easily serializable and <code>PureAbility</code> instance is not, but can be created from rules.</p>\n<p>Sessions in express usually are implemented with help of <a href=\"https://www.npmjs.com/package/express-session\" target=\"_blank\" rel=\"noopener nofollow\">express-session</a> and <a href=\"https://www.npmjs.com/package/connect-redis\" target=\"_blank\" rel=\"noopener nofollow\">connect-redis</a>. We will do it the same way.</p>\n<p>So, the only thing which is left is to implement <code>provideAbility</code> middleware that saves rules for a particular user in his session storage. Pay attention that we use <code>defineRulesFor</code> and not <code>defineAbilityFor</code> function:</p>\n<pre><code data-filename=\"provideAbility.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { createMongoAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { defineRulesFor } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">provideAbility</span>(<span class=\"hljs-params\">req, res, next</span>) </span>{\n  <span class=\"hljs-keyword\">let</span> rules = req.session.abilityRules;\n\n  <span class=\"hljs-keyword\">if</span> (!req.session.abilityRules) {\n    rules = <span class=\"hljs-keyword\">await</span> defineRulesFor(req.user);\n    req.session.abilityRules = rules\n  }\n\n  req.ability = createMongoAbility(rules);\n  next();\n}\n</code></pre>\n<p>And make sure that you correctly configure express-session in your <code>app.ts</code> file. It should be something like this:</p>\n<pre><code data-filename=\"app.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { provideAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./provideAbility&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> express <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;express&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> session <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;express-session&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> redis <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redis&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> createRedisStore <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;connect-redis&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> app = express();\n<span class=\"hljs-keyword\">const</span> RedisStore = createRedisStore(session);\n\napp.use(session({\n  <span class=\"hljs-attr\">store</span>: <span class=\"hljs-keyword\">new</span> RedisStore({ <span class=\"hljs-attr\">client</span>: redis.createClient() }),\n  <span class=\"hljs-attr\">secret</span>: <span class=\"hljs-string\">&#x27;my app session secret&#x27;</span>,\n}));\n\n<span class=\"hljs-comment\">// app configuration and other middlewares</span>\n\napp.use(provideAbility);\n</code></pre>\n<h3 id=\"in-jwt-token-payload\"><a name=\"in-jwt-token-payload\" class=\"h-link\" href=\"#\"></a>In JWT token payload</h3>\n<p>If the app uses stateless <a href=\"https://en.wikipedia.org/wiki/JSON_Web_Token\" target=\"_blank\" rel=\"noopener nofollow\">JWT</a> tokens, you can embed the rules into its payload:</p>\n<pre><code data-filename=\"login.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> jwt <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;jsonwebtoken&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { defineRulesFor } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">login</span>(<span class=\"hljs-params\">req, res</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> token = jwt.sign({\n    <span class=\"hljs-attr\">id</span>: req.user.id,\n    <span class=\"hljs-attr\">rules</span>: <span class=\"hljs-keyword\">await</span> defineRulesFor(req.user)\n  }, <span class=\"hljs-string\">&#x27;secret&#x27;</span>, { <span class=\"hljs-attr\">expiresIn</span>: <span class=\"hljs-string\">&#x27;1d&#x27;</span> })\n\n  res.send({ token })\n}\n</code></pre>\n<p>And implement <code>provideAbility</code> middleware that creates ability out of jwt token which is provided by client in <code>Authorization</code> header:</p>\n<pre><code data-filename=\"provideAbility.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { createMongoAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> jwt <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;jsonwebtoken&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { defineRulesFor } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./defineAbility&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">provideAbility</span>(<span class=\"hljs-params\">req, res, next</span>) </span>{\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> token = req.headers.authorization;\n    <span class=\"hljs-keyword\">const</span> { rules } = jwt.verify(token, req.app.get(<span class=\"hljs-string\">&#x27;jwtSecret&#x27;</span>));\n\n    req.ability = createMongoAbility(rules);\n    next();\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    next(error);\n  }\n}\n</code></pre>\n<blockquote>\n<p>You can use <code>packRules</code> and <code>unpackRules</code> to minimize rules payload size in 2 times. Check the <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;api/casl-ability-extra&quot;}\" hash=\"pack-rules\">API docs of @casl/ability/extra</app-link> for details</p>\n</blockquote>\n<h2 id=\"when-to-avoid\"><a name=\"when-to-avoid\" class=\"h-link\" href=\"#\"></a>When to avoid</h2>\n<p>There are few cases when you should avoid caching:</p>\n<ol>\n<li>The amount of abilities is small.</li>\n<li>The requests to the database are cached in service layer.</li>\n<li>Your permissions are dynamic and it makes hard to keep cache in sync with the datastore state.</li>\n<li>You can rethink domain model to simplify permissions logic (denormalize some entities or add additional foreign keys).</li>\n</ol>\n<h2 id=\"alternative-ways\"><a name=\"alternative-ways\" class=\"h-link\" href=\"#\"></a>Alternative ways</h2>\n<p>Another way is to rethink domain (or data) model, so that you can build abilities from the information which you load for every request (e.g., completely on <code>user</code>'s details). In the case described in <a href=\"#the-issue\">The issue</a>, we could add <code>userId</code> field to <code>Device</code> model and that would make things work fast without additional caching.</p>","headings":[{"id":"the-issue","title":"The issue"},{"id":"the-solution","title":"The solution"},{"id":"demo","title":"Demo"},{"id":"in-memory-lru-cache","title":"In memory LRU cache"},{"id":"in-session-storage","title":"In session storage"},{"id":"in-jwt-token-payload","title":"In JWT token payload"},{"id":"when-to-avoid","title":"When to avoid"},{"id":"alternative-ways","title":"Alternative ways"}],"id":"cookbook/cache-rules"}