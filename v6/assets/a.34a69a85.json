{"title":"Define Action Aliases","categories":["guide"],"order":55,"meta":{"keywords":null,"description":null},"content":"<p>Aliases gives a possibility to combine several actions into one. This also simplifies checks when we need to ensure that user can do both actions together (e.g., <code>delete</code> and <code>update</code>).</p>\n<p>To define an alias, we need to use <code>createAliasResolver</code> function. It accepts a single argument - aliases to actions map. For example, here we define modify alias as a combination of update and delete actions:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility, createAliasResolver } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> resolveAction = createAliasResolver({\n  <span class=\"hljs-attr\">modify</span>: [<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;delete&#x27;</span>]\n});\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;modify&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>);\n}, { resolveAction });\n\nability.can(<span class=\"hljs-string\">&#x27;modify&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>); <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>); <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;delete&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p>When you check abilities by alias, it means that user has all required actions (or doesn't have at least one), so:</p>\n<pre><code class=\"hljs language-js\">ability.can(<span class=\"hljs-string\">&#x27;modify&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>) === ability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>) &amp;&amp; ability.can(<span class=\"hljs-string\">&#x27;delete&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>);\n</code></pre>\n<p><strong>Be aware</strong> that aliases work only in one direction! It means that <code>modify</code> is an alias for <code>update</code> and <code>delete</code> but <code>update</code> and <code>delete</code> do not automatically form <code>modify</code> alias. To understand what this means, let's consider the same example but with different rules:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { defineAbility, createAliasResolver } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> resolveAction = createAliasResolver({\n  <span class=\"hljs-attr\">modify</span>: [<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;delete&#x27;</span>]\n});\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can([<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;delete&#x27;</span>], <span class=\"hljs-string\">&#x27;Post&#x27;</span>);\n}, { resolveAction });\n\nability.can(<span class=\"hljs-string\">&#x27;modify&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>); <span class=\"hljs-comment\">// false &lt;---</span>\nability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>); <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;delete&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<p>We got <code>false</code> for <code>modify</code> action, even though we can <code>delete</code> and <code>update</code> a Post! Aliases are resolved once on <code>PureAbility</code> instantiation level or when you call <code>ability.update</code>. It was done this way in order to make <code>ability.can</code> faster.</p>\n<p>You can also define aliases on aliases, they are resolved recursively:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility, createAliasResolver } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> resolveAction = createAliasResolver({\n  <span class=\"hljs-attr\">modify</span>: [<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;delete&#x27;</span>],\n  <span class=\"hljs-attr\">access</span>: [<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;modify&#x27;</span>]\n});\n<span class=\"hljs-keyword\">const</span> ability = defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;access&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>);\n}, { resolveAction });\n\nability.can(<span class=\"hljs-string\">&#x27;access&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>); <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;modify&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>); <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>); <span class=\"hljs-comment\">// true</span>\nability.can(<span class=\"hljs-string\">&#x27;delete&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<h2 id=\"invalid-usage\"><a name=\"invalid-usage\" class=\"h-link\" href=\"#\"></a>Invalid usage</h2>\n<p>In any environment that is not production (determined by <code>process.env.NODE_ENV</code>), <code>createAliasResolver</code> analyses passed in object and forbids to:</p>\n<ol>\n<li>Create an alias for <code>manage</code> action.<br>\n<code>manage</code> is reserved and represents any action, so there is no need to alias it (e.g., <code>createAliasResolver({ access: 'manage' })</code>).</li>\n<li>Create an alias to itself (e.g., <code>createAliasResolver({ access: 'access' })</code>).</li>\n</ol>\n<p>It doesn't detect cycles through several levels of indirection, so you need to ensure this by yourself.</p>","headings":[{"id":"invalid-usage","title":"Invalid usage"}],"id":"guide/define-aliases"}