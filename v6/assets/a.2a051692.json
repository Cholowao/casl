{"title":"Roles with persisted permissions","categories":["cookbook"],"order":25,"meta":{"keywords":null,"description":null},"content":"<blockquote>\n<p>This recipe targets backend developers. We use <a href=\"https://www.typescriptlang.org\" target=\"_blank\" rel=\"noopener nofollow\">TypeScript</a> and <a href=\"https://en.wikipedia.org/wiki/Relational_database\" target=\"_blank\" rel=\"noopener nofollow\">RDBMS</a> in this guide, so the basic knowledge of both is required.</p>\n</blockquote>\n<h2 id=\"the-issue\"><a name=\"the-issue\" class=\"h-link\" href=\"#\"></a>The issue</h2>\n<p>The application can be used by multiple users with different roles. Roles' permissions should be configurable through API (e.g., REST API or User Interface). So, we don't need to change or redeploy the app in order to change permissions.</p>\n<blockquote>\n<p>This is also known as <a href=\"https://searchsecurity.techtarget.com/definition/role-based-access-control-RBAC\" target=\"_blank\" rel=\"noopener nofollow\">RBAC (Role based access control)</a>.</p>\n</blockquote>\n<h2 id=\"the-solution\"><a name=\"the-solution\" class=\"h-link\" href=\"#\"></a>The solution</h2>\n<p>In order to achieve this, we need to store permissions in the database.</p>\n<p>First of all, we need to gather all possible actions and subjects, in order to validate them before saving permission to the database.</p>\n<p>When all combinations of actions and subjects are known, we can create a table for <code>roles</code>. It should have at least 2 columns: <code>id</code> and <code>name</code>. Then we need to choose one of 2 options to connect roles with permissions:</p>\n<ol>\n<li>Add <code>permissions</code> column of JSON (or TEXT) data type into <code>roles</code> and store all rules in that single column.<br>\n<strong>The main advantage</strong> is that it's very simple to manage and retrieve.\n<strong>The main disadvantage</strong> is that most ORMs doesn't support partial updates of JSON (and especially TEXT) column, instead they update the whole value as a primitive value. This may lead to unexpected results if several users update permissions of the same role at the same time (the last one will reset changes of others).</li>\n<li>Create a separate table for <code>permissions</code> which has <code>action</code>, <code>subject</code>, <code>conditions</code> and <code>roleId</code> fields.<br>\n<strong>The main advantage</strong> is that you can do partial updates using regular SQL.\n<strong>The main disadvantage</strong> more complicated queries (you need to join <code>roles</code> and <code>permissions</code>) and bigger eventual database size.</li>\n</ol>\n<p>We will use the 1st option in this guide because permissions are not changed often, so the risk of conflict is acceptable for us. Moreover this <code>permissions</code> field will contain an array that is acceptable by <code>Ability</code> instance (i.e., <code>RawRuleOf&lt;AppAbility&gt;[]</code>).</p>\n<blockquote>\n<p>If it's not acceptable for your situation, use raw SQL syntax of your RDBMS to partially update JSON column or use 2nd option.</p>\n</blockquote>\n<p>We also need a table for <code>users</code>. Every user may have only 1 role, in other words every row in <code>users</code> table should have <code>roleId</code> field.</p>\n<p>Having users, roles and permissions, we can create <code>Ability</code> instance for every user request. The logic for the REST API is the following:</p>\n<ol>\n<li>User sends request to access some resources.</li>\n<li>If it's not authenticated, sends back an error that he needs to login.</li>\n<li>If it's authenticated, the app fetches it together with permissions from the database.</li>\n<li>The app creates an <code>Ability</code> instance based on user's permissions</li>\n<li>Using <code>Ability</code> instance, the app checks whether user can do a particular action on requested resource.</li>\n<li>If not, it's sends error back that user has no permission to do what he attempted to do.</li>\n<li>If user has permissions, then proceed with the actual action.</li>\n</ol>\n<p>Enough theory, let's see some examples!</p>\n<blockquote>\n<p>In the next Demo, we are not going to implement REST API as the main intention of this recipe is to solve <a href=\"#the-issue\">The issue</a>.</p>\n</blockquote>\n<h2 id=\"demo\"><a name=\"demo\" class=\"h-link\" href=\"#\"></a>Demo</h2>\n<p>To make things simple, we will use SQLite database. This also allows to quickly setup the demo on local machine and even run it in a browser.</p>\n<p>As a domain, we will use blog application. This is the most known domain, so we won't spent time explaining its details and instead will concentrate on the actual issue.</p>\n<p>In our blog, we have 2 roles: <code>member</code> (any registered user) and <code>admin</code>. So, <code>admin</code> can do everything and <code>member</code>:</p>\n<ul>\n<li>can read all articles</li>\n<li>can manage own articles</li>\n</ul>\n<p>We will use <a href=\"http://knexjs.org/\" target=\"_blank\" rel=\"noopener nofollow\">knex</a> SQL builder to work with the database.</p>\n<blockquote>\n<p>We are not going to walk through knex's API and usage, so if you are not familiar with it, take some time to look through its documentation. Anyway, don't worry, it's quite expressive.</p>\n</blockquote>\n<p>So, let's define the table structure for our database. It includes 3 tables: <code>users</code>, <code>roles</code> and <code>articles</code>. Also we will seed our database with default records:</p>\n<ul>\n<li>2 roles: admin and member</li>\n<li>2 users: 1 admin and 1 member</li>\n</ul>\n<p>You can find the migration and seeds below:</p>\n<details>\n<summary>Initial migration</summary>\n<pre><code data-filename=\"migrations/20200401110234_init.js\" class=\"language-js\"><span class=\"hljs-built_in\">exports</span>.up = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">knex</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> knex.schema\n    .createTable(<span class=\"hljs-string\">&#x27;users&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">table</span>) =&gt;</span> {\n      table.increments(<span class=\"hljs-string\">&#x27;id&#x27;</span>);\n      table.string(<span class=\"hljs-string\">&#x27;email&#x27;</span>, <span class=\"hljs-number\">255</span>).notNullable();\n      table.string(<span class=\"hljs-string\">&#x27;password&#x27;</span>, <span class=\"hljs-number\">50</span>).notNullable();\n      table.integer(<span class=\"hljs-string\">&#x27;roleId&#x27;</span>).unsigned().notNullable();\n\n      table.foreign(<span class=\"hljs-string\">&#x27;roleId&#x27;</span>).references(<span class=\"hljs-string\">&#x27;id&#x27;</span>).inTable(<span class=\"hljs-string\">&#x27;roles&#x27;</span>);\n    })\n    .createTable(<span class=\"hljs-string\">&#x27;articles&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">table</span>) =&gt;</span> {\n      table.increments(<span class=\"hljs-string\">&#x27;id&#x27;</span>);\n      table.string(<span class=\"hljs-string\">&#x27;title&#x27;</span>, <span class=\"hljs-number\">255</span>).notNullable();\n      table.string(<span class=\"hljs-string\">&#x27;description&#x27;</span>).notNullable();\n      table.integer(<span class=\"hljs-string\">&#x27;authorId&#x27;</span>).unsigned().notNullable();\n\n      table.foreign(<span class=\"hljs-string\">&#x27;authorId&#x27;</span>).references(<span class=\"hljs-string\">&#x27;id&#x27;</span>).inTable(<span class=\"hljs-string\">&#x27;users&#x27;</span>);\n    })\n    .createTable(<span class=\"hljs-string\">&#x27;roles&#x27;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">table</span>) =&gt;</span> {\n      table.increments(<span class=\"hljs-string\">&#x27;id&#x27;</span>);\n      table.string(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-number\">255</span>).notNullable();\n      table.json(<span class=\"hljs-string\">&#x27;permissions&#x27;</span>).notNullable();\n    });\n};\n\n<span class=\"hljs-built_in\">exports</span>.down = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">knex</span>) </span>{\n  <span class=\"hljs-keyword\">return</span> knex.schema\n      .dropTable(<span class=\"hljs-string\">&#x27;users&#x27;</span>)\n      .dropTable(<span class=\"hljs-string\">&#x27;articles&#x27;</span>)\n      .dropTable(<span class=\"hljs-string\">&#x27;roles&#x27;</span>);\n};\n</code></pre>\n</details>\n<p>and initial seed:</p>\n<pre><code data-filename=\"seeds/init.js\" class=\"language-js\"><span class=\"hljs-built_in\">exports</span>.seed = <span class=\"hljs-keyword\">async</span> (knex) =&gt; {\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all([\n    knex(<span class=\"hljs-string\">&#x27;users&#x27;</span>).del(),\n    knex(<span class=\"hljs-string\">&#x27;roles&#x27;</span>).del()\n  ]);\n\n  <span class=\"hljs-keyword\">await</span> knex(<span class=\"hljs-string\">&#x27;roles&#x27;</span>).insert([\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;admin&#x27;</span>,\n      <span class=\"hljs-attr\">permissions</span>: <span class=\"hljs-built_in\">JSON</span>.stringify([\n        { <span class=\"hljs-attr\">action</span>: <span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;all&#x27;</span> }\n      ])\n    },\n    {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;member&#x27;</span>,\n      <span class=\"hljs-attr\">permissions</span>: <span class=\"hljs-built_in\">JSON</span>.stringify([\n        { <span class=\"hljs-attr\">action</span>: <span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;Article&#x27;</span> },\n        { <span class=\"hljs-attr\">action</span>: <span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;Article&#x27;</span>, <span class=\"hljs-attr\">conditions</span>: { <span class=\"hljs-attr\">authorId</span>: <span class=\"hljs-string\">&#x27;${user.id}&#x27;</span> } },\n      ])\n    }\n  ]);\n  <span class=\"hljs-keyword\">await</span> knex(<span class=\"hljs-string\">&#x27;users&#x27;</span>).insert([\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;admin@casl.io&#x27;</span>, <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;123456&#x27;</span>, <span class=\"hljs-attr\">roleId</span>: <span class=\"hljs-number\">1</span> },\n    { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;member@casl.io&#x27;</span>, <span class=\"hljs-attr\">password</span>: <span class=\"hljs-string\">&#x27;123456&#x27;</span>, <span class=\"hljs-attr\">roleId</span>: <span class=\"hljs-number\">2</span> },\n  ]);\n};\n</code></pre>\n<blockquote>\n<p>We used <code>${user.id}</code> in <code>conditions</code> property of permissions. This is just a placeholder which we will replace it later with the id of a particular user.</p>\n</blockquote>\n<p>Now, let's define all possible actions and subjects:</p>\n<pre><code data-filename=\"services/appAbility.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { Ability, RawRuleOf, ForcedSubject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> actions = [<span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-string\">&#x27;create&#x27;</span>, <span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;delete&#x27;</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">const</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> subjects = [<span class=\"hljs-string\">&#x27;Article&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>] <span class=\"hljs-keyword\">as</span> <span class=\"hljs-keyword\">const</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> Abilities = [\n  <span class=\"hljs-keyword\">typeof</span> actions[<span class=\"hljs-built_in\">number</span>],\n  <span class=\"hljs-keyword\">typeof</span> subjects[<span class=\"hljs-built_in\">number</span>] | ForcedSubject&lt;Exclude&lt;<span class=\"hljs-keyword\">typeof</span> subjects[<span class=\"hljs-built_in\">number</span>], <span class=\"hljs-string\">&#x27;all&#x27;</span>&gt;&gt;\n];\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">type</span> AppAbility = Ability&lt;Abilities&gt;;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> createAbility = <span class=\"hljs-function\">(<span class=\"hljs-params\">rules: RawRuleOf&lt;AppAbility&gt;[]</span>) =&gt;</span> <span class=\"hljs-keyword\">new</span> Ability&lt;Abilities&gt;(rules);\n</code></pre>\n<blockquote>\n<p>See <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/typescript&quot;}\" hash=\"useful-type-helpers\">TypeScript support</app-link> to get details about type helpers.</p>\n</blockquote>\n<p><code>typeof actions[number]</code> converts readonly array into union of its values, this allows to reuse actions and subjects defined in value scope inside type scope. We also export <code>createAbility</code> function to make it easier to create <code>Ability</code> instance with bound generic parameters.</p>\n<p>In order to work with our database on higher level, we need to create services.</p>\n<h3 id=\"services\"><a name=\"services\" class=\"h-link\" href=\"#\"></a>Services</h3>\n<p>We need to create 2 services: one to fetch <code>users</code> and another to manage <code>articles</code>.</p>\n<p>Let's start from a function that will allow us to fetch a single user by some conditions from the database. This function also will prepare user's permissions, so we can directly pass them in <code>createAbility</code> function:</p>\n<pre><code data-filename=\"services/users.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> db <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../db&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { User } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../models/User&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> interpolate <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../helpers/interpolate&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">findBy</span>(<span class=\"hljs-params\">where: Partial&lt;Record&lt;keyof User, <span class=\"hljs-built_in\">any</span>&gt;&gt;</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { permissions, ...user } = <span class=\"hljs-keyword\">await</span> db&lt;User&gt;(<span class=\"hljs-string\">&#x27;users&#x27;</span>)\n    .innerJoin(<span class=\"hljs-string\">&#x27;roles&#x27;</span>, <span class=\"hljs-string\">&#x27;users.roleId&#x27;</span>, <span class=\"hljs-string\">&#x27;roles.id&#x27;</span>)\n    .select(<span class=\"hljs-string\">&#x27;users.id&#x27;</span>, <span class=\"hljs-string\">&#x27;users.email&#x27;</span>, <span class=\"hljs-string\">&#x27;roles.permissions&#x27;</span>, { <span class=\"hljs-attr\">role</span>: <span class=\"hljs-string\">&#x27;roles.name&#x27;</span> })\n    .where(where)\n    .first();\n\n  user.permissions = interpolate(permissions, { user });\n\n  <span class=\"hljs-keyword\">return</span> user;\n}\n</code></pre>\n<p>Let's go line by line to understand what happens in the function:</p>\n<ul>\n<li>\n<p>we import <code>db</code>, this is a knex connection instance</p>\n</li>\n<li>\n<p>we import <code>User</code>, this is just an interface for users that has the next shape:</p>\n<pre><code data-filename=\"models/User.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { RawRuleOf } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { AppAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../services/appAbility&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> User {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>\n  <span class=\"hljs-attr\">email</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">role</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">permissions</span>: RawRuleOf&lt;AppAbility&gt;[]\n}\n</code></pre>\n<p>As you can see, its permissions property has the type that <code>Ability</code> instance accepts in the first parameter. This was done intentionally to simplify ability creation.</p>\n</li>\n<li>\n<p>we import <code>interpolate</code> function, this function takes a JSON template and replaces all placeholder (e.g., <code>${user.id}</code>) with the provided variables inside context. This function uses <code>reviver</code> argument of <code>JSON.parse</code> method to iterate deeply over the object but it's not important for this guide. You can use any template library you like (e.g., <a href=\"https://mustache.github.io/\" target=\"_blank\" rel=\"noopener nofollow\">mustache</a>, <a href=\"http://underscorejs.org/#template\" target=\"_blank\" rel=\"noopener nofollow\">underscore template</a>).</p>\n</li>\n<li>\n<p>in <code>findBy</code> function, we join users and roles to get user's permissions and role and preprocess permissions' template with the <code>interpolate</code> function (so that, it replaces <code>${user.id}</code> placeholders with the actual <code>user.id</code> value).</p>\n</li>\n</ul>\n<p>The service for articles is more complicated, it will check users' ability to do a particular action on the provided article instance. For the sake of simplicity, we'll show only <code>create</code> function (all the rest are similar):</p>\n<pre><code data-filename=\"services/articles.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { ForbiddenError, subject } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { AppAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./appAbility&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> db <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../db&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { Article } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../models/Article&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> articles = <span class=\"hljs-function\">() =&gt;</span> db&lt;Article&gt;(<span class=\"hljs-string\">&#x27;articles&#x27;</span>);\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">create</span>(<span class=\"hljs-params\">ability: AppAbility, partialArticle: Omit&lt;Article, <span class=\"hljs-string\">&#x27;id&#x27;</span>&gt;</span>) </span>{\n  ForbiddenError.from(ability).throwUnlessCan(<span class=\"hljs-string\">&#x27;create&#x27;</span>, subject(<span class=\"hljs-string\">&#x27;Article&#x27;</span>, partialArticle));\n  <span class=\"hljs-keyword\">const</span> [id] = <span class=\"hljs-keyword\">await</span> articles().insert(partialArticle);\n\n  <span class=\"hljs-keyword\">return</span> { id, ...partialArticle } <span class=\"hljs-keyword\">as</span> Article;\n}\n\n<span class=\"hljs-comment\">// other functions</span>\n</code></pre>\n<p>In this service, we use <code>ForbiddenError</code> class which allows to throw an error if user doesn't have an ability to do something. We also wrap <code>partialArticle</code> with <code>subject</code> call. This allows <code>Ability</code> instance to detect subject type of a plain object.</p>\n<blockquote>\n<p>See <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/subject-type-detection&quot;}\" hash=\"subject-helper\">Subject type detection</app-link> for details.</p>\n</blockquote>\n<p><code>Article</code> is an interface that enforces the shape of our articles:</p>\n<pre><code data-filename=\"models/Article.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">interface</span> Article {\n  <span class=\"hljs-attr\">id</span>: <span class=\"hljs-built_in\">number</span>\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">description</span>: <span class=\"hljs-built_in\">string</span>\n  <span class=\"hljs-attr\">authorId</span>: <span class=\"hljs-built_in\">number</span>\n}\n</code></pre>\n<p>Now, when service layer is finished, we can put it together!</p>\n<h3 id=\"putting-together\"><a name=\"putting-together\" class=\"h-link\" href=\"#\"></a>Putting together</h3>\n<p>We need to start from connecting things together, to do so we need to fetch users and create <code>Ability</code> instances for each one:</p>\n<pre><code data-filename=\"main.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> { findBy } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./services/users&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { createAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./services/appAbility&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> [admin, author] = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all([\n    findBy({ <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;admin@casl.io&#x27;</span> }),\n    findBy({ <span class=\"hljs-attr\">email</span>: <span class=\"hljs-string\">&#x27;member@casl.io&#x27;</span> }),\n  ]);\n\n  <span class=\"hljs-keyword\">const</span> adminAbility = createAbility(admin!.permissions);\n  <span class=\"hljs-keyword\">const</span> authorAbility = createAbility(author!.permissions);\n\n  <span class=\"hljs-comment\">// the rest of the code</span>\n}\n</code></pre>\n<p>We also need to create 2 articles, one that is written by admin and another by author:</p>\n<pre><code data-filename=\"main.ts\" class=\"language-ts\"><span class=\"hljs-comment\">// imports here</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">// fetch users &amp; create ability instances</span>\n\n  <span class=\"hljs-keyword\">const</span> adminArticle = {\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;CASl and TypeScript&#x27;</span>,\n    <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;Is very powerful&#x27;</span>,\n    <span class=\"hljs-attr\">authorId</span>: admin!.id\n  };\n\n  <span class=\"hljs-keyword\">const</span> authorArticle = {\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;CASl and TypeScript&#x27;</span>,\n    <span class=\"hljs-attr\">description</span>: <span class=\"hljs-string\">&#x27;Is very powerful&#x27;</span>,\n    <span class=\"hljs-attr\">authorId</span>: author!.id\n  };\n\n  <span class=\"hljs-comment\">// the rest of the code</span>\n}\n</code></pre>\n<p>And finally let's check our permissions:</p>\n<ul>\n<li><code>admin</code> user should be able to create article in spite of who wrote it</li>\n<li><code>member</code> user should be able to only create articles that were written by him</li>\n</ul>\n<pre><code data-filename=\"main.ts\" class=\"language-ts\"><span class=\"hljs-comment\">// other imports here</span>\n<span class=\"hljs-keyword\">import</span> * <span class=\"hljs-keyword\">as</span> articles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./services/articles&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">main</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">await</span> articles.create(adminAbility, adminArticle);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;[admin]: created article written by himself&#x27;</span>)\n\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">await</span> articles.create(authorAbility, adminArticle);\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;[member]: cannot create an article written by admin&#x27;</span>);\n  }\n\n  <span class=\"hljs-keyword\">await</span> articles.create(adminAbility, authorArticle);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;[admin]: created article written by author&#x27;</span>);\n\n  <span class=\"hljs-keyword\">await</span> articles.create(authorAbility, authorArticle);\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;[author]: created article written by himself&#x27;</span>);\n\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;\\nAll articles &#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> rawArticles = <span class=\"hljs-keyword\">await</span> articles.find();\n\n  rawArticles.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">article</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> prefix = article.authorId === admin!.id ? <span class=\"hljs-string\">&#x27;[admin]&#x27;</span> : <span class=\"hljs-string\">&#x27;[author]&#x27;</span>;\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${prefix}</span>: <span class=\"hljs-subst\">${article.title}</span>`</span>);\n  });\n}\n</code></pre>\n<p>Let's call <code>main</code> function and see the results:</p>\n<pre><code class=\"hljs language-sh\">$ npm start\n\n[admin]: created article written by himself\n[author]: cannot create an article written by admin\n[admin]: created article written by author\n[author]: created article written by himself\n\nAll articles\n[admin]: CASl and TypeScript\n[author]: CASl and TypeScript\n[author]: CASl and TypeScript\n</code></pre>\n<p>Everything works as we it should! Now let's allow members to create any article. To do so, we need to update permissions of <code>member</code> role and we will do this using <a href=\"http://knexjs.org/\" target=\"_blank\" rel=\"noopener nofollow\">knex</a>:</p>\n<pre><code data-filename=\"updateMemberRole.ts\" class=\"language-ts\"><span class=\"hljs-keyword\">import</span> db <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./db&#x27;</span>;\n\ndb(<span class=\"hljs-string\">&#x27;roles&#x27;</span>)\n  .update({\n    <span class=\"hljs-attr\">permissions</span>: <span class=\"hljs-built_in\">JSON</span>.stringify([\n      { <span class=\"hljs-attr\">action</span>: [<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;create&#x27;</span>], <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;Article&#x27;</span> },\n      { <span class=\"hljs-attr\">action</span>: [<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;delete&#x27;</span>], <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;Article&#x27;</span>, <span class=\"hljs-attr\">conditions</span>: { <span class=\"hljs-attr\">authorId</span>: <span class=\"hljs-string\">&#x27;${user.id}&#x27;</span>} },\n    ])\n  })\n  .where(<span class=\"hljs-string\">&#x27;name&#x27;</span>, <span class=\"hljs-string\">&#x27;member&#x27;</span>)\n  .then(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;Permissions of &quot;member&quot; role has been updated&#x27;</span>);\n    <span class=\"hljs-keyword\">return</span> db.destroy();\n  })\n  .catch(<span class=\"hljs-built_in\">console</span>.error);\n</code></pre>\n<p>After updating member's permissions and running <code>main</code> function again, we got this results:</p>\n<pre><code class=\"hljs language-sh\">$ npm start\n\n[admin]: created own article\n[member]: created article written by admin &lt;---\n[admin]: created article written by author\n[member]: created article written by himself\n\nAll articles\n[admin]: CASl and TypeScript\n[member]: CASl and TypeScript\n[member]: CASl and TypeScript\n[admin]: CASl and TypeScript\n[admin]: CASl and TypeScript\n[member]: CASl and TypeScript\n[member]: CASl and TypeScript\n</code></pre>\n<p>As you can see, member is now allowed to create articles created by admins!</p>\n<h3 id=\"conclusion\"><a name=\"conclusion\" class=\"h-link\" href=\"#\"></a>Conclusion</h3>\n<p>That's it! You now have a fully manageable CASL powered permissions logic in your app. We hope this tutorial was helpful and made your development experience with CASL.js even more enjoyable :)</p>\n<p>You can find the source code of this solution on <a href=\"https://github.com/stalniy/casl-persisted-permissions-example\" target=\"_blank\" rel=\"noopener nofollow\">Github</a>.</p>\n<h2 id=\"when-to-avoid\"><a name=\"when-to-avoid\" class=\"h-link\" href=\"#\"></a>When to avoid</h2>\n<ol>\n<li>If you have a predefined set of permissions for every role which very unlikely to change.</li>\n<li>If you start a new project and not sure whether you need to dynamically configure permissions.</li>\n</ol>\n<h2 id=\"alternative-patterns\"><a name=\"alternative-patterns\" class=\"h-link\" href=\"#\"></a>Alternative patterns</h2>\n<p>As an alternative you can implement <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;cookbook/roles-with-static-permissions&quot;}\">predefined permissions with CASL</app-link>. It brings the same benefits but with less overhead.</p>\n<p>If you need to implement claim based permissions, check <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;cookbook/claim-authorization&quot;}\">Claim based Authorization</app-link> recipe.</p>","headings":[{"id":"the-issue","title":"The issue"},{"id":"the-solution","title":"The solution"},{"id":"demo","title":"Demo"},{"id":"services","title":"Services"},{"id":"putting-together","title":"Putting together"},{"id":"conclusion","title":"Conclusion"},{"id":"when-to-avoid","title":"When to avoid"},{"id":"alternative-patterns","title":"Alternative patterns"}],"id":"cookbook/roles-with-persisted-permissions"}