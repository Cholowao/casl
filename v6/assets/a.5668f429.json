{"title":"Define Rules","categories":["guide"],"order":20,"meta":{"keywords":null,"description":null},"content":"<p>There are 3 ways you can define abilities:</p>\n<ul>\n<li>using <code>defineAbility</code> function</li>\n<li>using <code>AbilityBuilder</code> class</li>\n<li>using <code>JSON</code> objects</li>\n</ul>\n<p>In order to understand which way to use, let's learn more about each one.</p>\n<h2 id=\"define-ability-function\"><a name=\"define-ability-function\" class=\"h-link\" href=\"#\"></a>defineAbility function</h2>\n<p>This function is a <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\" target=\"_blank\" rel=\"noopener nofollow\">DSL</a> that allows to create <code>MongoAbility</code> instance using <code>can</code> and <code>cannot</code> methods. It allows to define and use <code>MongoAbility</code> instance without writing too much code.</p>\n<h3 id=\"define-ability-example\"><a name=\"define-ability-example\" class=\"h-link\" href=\"#\"></a>defineAbility example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can, cannot</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>);\n  cannot(<span class=\"hljs-string\">&#x27;delete&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>, { <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">true</span> });\n});\n</code></pre>\n<p>You can pass multiple actions, subjects and fields in the single <code>can</code> (or <code>cannot</code>) function. So, instead of</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can, cannot</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>);\n  can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>);\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Comment&#x27;</span>);\n  can(<span class=\"hljs-string\">&#x27;update&#x27;</span>, <span class=\"hljs-string\">&#x27;Comment&#x27;</span>);\n});\n</code></pre>\n<p>you can do:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can, cannot</span>) =&gt;</span> {\n  can([<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;update&#x27;</span>], [<span class=\"hljs-string\">&#x27;Post&#x27;</span>, <span class=\"hljs-string\">&#x27;Comment&#x27;</span>]);\n});\n</code></pre>\n<blockquote>\n<p>To learn more about <code>can</code> and <code>cannot</code> functions' parameters, read <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;api&quot;}\" hash=\"abilitybuilder\">AbilityBuilder API</app-link></p>\n</blockquote>\n<h3 id=\"when-to-use-define-ability\"><a name=\"when-to-use-define-ability\" class=\"h-link\" href=\"#\"></a>When to use defineAbility</h3>\n<ul>\n<li>unit tests</li>\n<li>examples and learning resources</li>\n<li>prototypes or really simple applications</li>\n</ul>\n<p>So, to keep examples simple and clear, we will use <code>defineAbility</code> in majority of code snippets in this documentation.</p>\n<h3 id=\"why-define-ability-is-not-recommended\"><a name=\"why-define-ability-is-not-recommended\" class=\"h-link\" href=\"#\"></a>Why defineAbility is not recommended</h3>\n<p>There is nothing extremely wrong with this function but there are several drawbacks when you use it in your app:</p>\n<ol>\n<li>In most cases, rules depends on user request, so using callback style to define permissions, adds additional nesting and increases cognitive complexity.</li>\n<li>It can create only <code>MongoAbility</code> instance which works with <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;guide/conditions-in-depth&quot;}\">MongoDB conditions</app-link>, so you won't be able to use another language to match conditions.</li>\n</ol>\n<blockquote>\n<p>See <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/customize-ability&quot;}\">Customize Ability</app-link> to know more about different ability classes and possibilities to customize it.</p>\n</blockquote>\n<h2 id=\"ability-builder-class\"><a name=\"ability-builder-class\" class=\"h-link\" href=\"#\"></a>AbilityBuilder class</h2>\n<p>This class implements <code>can</code> and <code>cannot</code> functions, that makes possible to write rules using <a href=\"https://en.wikipedia.org/wiki/Domain-specific_language\" target=\"_blank\" rel=\"noopener nofollow\">DSL</a> syntax. <strong>This is the recommended way to define rules using DSL syntax</strong></p>\n<h3 id=\"ability-builder-example\"><a name=\"ability-builder-example\" class=\"h-link\" href=\"#\"></a>AbilityBuilder example</h3>\n<p><a href=\"#defineability-example\">defineAbility example</a> written using <code>AbilityBuilder</code> class looks a bit more wordy:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { AbilityBuilder, createMongoAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>\n\n<span class=\"hljs-keyword\">const</span> { can, cannot, build } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(createMongoAbility);\n\ncan(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>);\ncannot(<span class=\"hljs-string\">&#x27;delete&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>, { <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">true</span> });\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> build();\n</code></pre>\n<p>But it allows to define rules without additional nesting, this is especially important when you build rules based on conditional logic:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { AbilityBuilder, createMongoAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineAbilityFor</span>(<span class=\"hljs-params\">user</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { can, cannot, build } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(createMongoAbility);\n\n  <span class=\"hljs-keyword\">if</span> (user.isAdmin) {\n    can(<span class=\"hljs-string\">&#x27;manage&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>); <span class=\"hljs-comment\">// read-write access to everything</span>\n  } <span class=\"hljs-keyword\">else</span> {\n    can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;all&#x27;</span>) <span class=\"hljs-comment\">// read-only access to everything</span>\n  }\n\n  cannot(<span class=\"hljs-string\">&#x27;delete&#x27;</span>, <span class=\"hljs-string\">&#x27;Post&#x27;</span>, { <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">true</span> });\n\n  <span class=\"hljs-keyword\">return</span> build();\n}\n</code></pre>\n<blockquote>\n<p>To learn more about <code>can</code> and <code>cannot</code> functions' parameters, read <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;api&quot;}\" hash=\"abilitybuilder\">AbilityBuilder API</app-link></p>\n</blockquote>\n<p>For more advanced cases, it's possible to use <code>rules</code> property of <code>AbilityBuilder</code> and create <code>MongoAbility</code> instance manually:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { AbilityBuilder, createMongoAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineAbilityFor</span>(<span class=\"hljs-params\">user</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> { can, cannot, rules } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(createMongoAbility);\n\n  <span class=\"hljs-comment\">// defined permissions</span>\n\n  <span class=\"hljs-keyword\">return</span> createMongoAbility(rules);\n}\n</code></pre>\n<h3 id=\"when-to-use-ability-builder\"><a name=\"when-to-use-ability-builder\" class=\"h-link\" href=\"#\"></a>When to use AbilityBuilder</h3>\n<ul>\n<li>in apps which have static permissions (i.e., permissions are not changed by admin user but defined inside system)</li>\n<li>anywhere where you use custom ability factory functions</li>\n</ul>\n<blockquote>\n<p>See <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/customize-ability&quot;}\">Customize Ability</app-link> to learn more about <code>PureAbility</code> class.</p>\n</blockquote>\n<h2 id=\"json-objects\"><a name=\"json-objects\" class=\"h-link\" href=\"#\"></a>JSON objects</h2>\n<p>It's not required to use <code>AbilityBuilder</code> to define rules in the app, especially if your rules are dynamic (i.e., stored in database or managed by admin users). In such cases, the preferred way is to use <code>JSON</code> objects. You can directly pass array of <code>JSON</code> rules into <code>Ability</code> constructor. Such rules are called raw rules</p>\n<blockquote>\n<p>you can read more about TypeScript types and their shapes in <app-link to=\"page\" params=\"{&quot;id&quot;:&quot;advanced/typescript&quot;}\">TypeScript Support</app-link></p>\n</blockquote>\n<h3 id=\"json-objects-example\"><a name=\"json-objects-example\" class=\"h-link\" href=\"#\"></a>JSON objects example</h3>\n<p>The same example using <code>JSON</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { createMongoAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> createMongoAbility([\n  {\n    <span class=\"hljs-attr\">action</span>: <span class=\"hljs-string\">&#x27;read&#x27;</span>,\n    <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;Post&#x27;</span>\n  },\n  {\n    <span class=\"hljs-attr\">inverted</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">action</span>: <span class=\"hljs-string\">&#x27;delete&#x27;</span>,\n    <span class=\"hljs-attr\">subject</span>: <span class=\"hljs-string\">&#x27;Post&#x27;</span>,\n    <span class=\"hljs-attr\">conditions</span>: { <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">true</span> }\n  }\n])\n</code></pre>\n<p>Pay attention to the <code>inverted</code> field, it indicates that a rule is an inverted one (i.e., forbids something).</p>\n<h3 id=\"the-shape-of-raw-rule\"><a name=\"the-shape-of-raw-rule\" class=\"h-link\" href=\"#\"></a>The shape of raw rule</h3>\n<p>The simplified version (without generics) of raw rule shape in <a href=\"http://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener nofollow\">TypeScript</a> looks like this:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">interface</span> RawRule {\n  <span class=\"hljs-attr\">action</span>: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">string</span>[]\n  subject?: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">string</span>[]\n  <span class=\"hljs-comment\">/** an array of fields to which user has (or not) access */</span>\n  fields?: <span class=\"hljs-built_in\">string</span>[]\n  <span class=\"hljs-comment\">/** an object of conditions which restricts the rule scope */</span>\n  conditions?: <span class=\"hljs-built_in\">any</span>\n  <span class=\"hljs-comment\">/** indicates whether rule allows or forbids something */</span>\n  inverted?: <span class=\"hljs-built_in\">boolean</span>\n  <span class=\"hljs-comment\">/** message which explains why rule is forbidden */</span>\n  reason?: <span class=\"hljs-built_in\">string</span>\n}\n</code></pre>\n<p>Don't worry if you are not familiar with TypeScript, you still have time to learn it ;) Kidding, or not?</p>\n<p>In the example above, <code>?</code> after field name means optional field, so everything is optional except <code>action</code>. <code>string[]</code> means an array of strings and <code>string | string[]</code> means either regular <code>string</code> or an array of strings. Now you know almost everything about TypeScript, do not thank :)</p>\n<h3 id=\"when-to-use-json-objects\"><a name=\"when-to-use-json-objects\" class=\"h-link\" href=\"#\"></a>When to use JSON objects</h3>\n<ul>\n<li>in apps, that have dynamic permissions (i.e., permissions are changed by admin user)</li>\n<li>in apps, that receive permissions via network layer (e.g., single page applications or microservices)</li>\n<li>to make the app's bundle size smaller (if you don't use <code>AbilityBuilder</code> or <code>defineAbility</code>, they can be shook out by bundlers such as <a href=\"https://rollupjs.org/guide/en/\" target=\"_blank\" rel=\"noopener nofollow\">rollup</a> or <a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"noopener nofollow\">webpack</a>)</li>\n</ul>\n<p>Now, as we know all possible ways to define rules, let's dive deeper into <code>can</code> and <code>cannot</code> methods.</p>\n<h2 id=\"rules\"><a name=\"rules\" class=\"h-link\" href=\"#\"></a>Rules</h2>\n<p>You can define as much rules as you need, CASL builds an index under the hood to keep checking logic fast. So, don't worry about performance.</p>\n<p>You can define the same pair of action and subject with different conditions multiple times. For example:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">true</span> });\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">status</span>: <span class=\"hljs-string\">&#x27;review&#x27;</span> });\n});\n</code></pre>\n<p>In such case, the pair of action/subject rules are combined by logical <code>OR</code>. More formally this can be translated as &quot;users can read Article if it's published OR users can read Article if it's not published AND in review status&quot;.</p>\n<p>But be careful, because <code>OR</code> logic returns <code>true</code> if one of its expressions are <code>true</code>, so the next code will always return <code>true</code>, even for articles that were not published:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>);\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">true</span> }); <span class=\"hljs-comment\">// (2)</span>\n});\n</code></pre>\n<p>More formally this code can be read as &quot;can read any article OR can read published articles&quot;. As you see, the first statement always valid, so the <code>(2)</code> <code>can</code> with conditions has no effect.</p>\n<p>It's also possible to restrict scope of direct rule with the inverted one for the same pair of action and subject. In such case, inverted rules are combined with direct ones by logical <code>AND</code>.</p>\n<p>Let's change the example above to disallow reading unpublished articles:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { defineAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> defineAbility(<span class=\"hljs-function\">(<span class=\"hljs-params\">can, cannot</span>) =&gt;</span> {\n  can(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>); <span class=\"hljs-comment\">// direct rule</span>\n  cannot(<span class=\"hljs-string\">&#x27;read&#x27;</span>, <span class=\"hljs-string\">&#x27;Article&#x27;</span>, { <span class=\"hljs-attr\">published</span>: <span class=\"hljs-literal\">false</span> }); <span class=\"hljs-comment\">// inverted rule</span>\n});\n</code></pre>\n<p>This is read as &quot;can read any article AND cannot read unpublished articles&quot;.</p>\n<h3 id=\"inverted-rules-order\"><a name=\"inverted-rules-order\" class=\"h-link\" href=\"#\"></a>Inverted rules order</h3>\n<p>It is important that in the example above <code>cannot read article unpublished</code> line comes after the <code>can read article</code> line. If they were reversed, <code>cannot read article unpublished</code> would be overridden by <code>can read article</code>.</p>\n<blockquote>\n<p>The rule of thumb is to define general rules first and more specific after general ones.</p>\n</blockquote>\n<p>It was done so in order to be able to override inverted rules by regular ones.</p>\n<h3 id=\"best-practice\"><a name=\"best-practice\" class=\"h-link\" href=\"#\"></a>Best practice</h3>\n<p>Direct logic is easier to reason about for human mind, so use direct rules as much as possible! Moreover, this allows to keep permissions clean, more readable and reduces the risk of giving wrong permissions to the wrong users.</p>\n<blockquote>\n<p>You can remember this rule as: <strong>Give permissions, don't take them away</strong></p>\n</blockquote>\n<p>So, are there a valid usecases for inverted rules? <strong>Yes</strong>! They work very well when are not combined with regular rules and defined explicitly to express why particular action on particular subject was forbidden, for example:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { AbilityBuilder, createMongoAbility } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@casl/ability&#x27;</span>;\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">defineAbility</span>(<span class=\"hljs-params\">user</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> hasPaidSubscription = <span class=\"hljs-keyword\">await</span> user.hasPaidSubscription();\n  <span class=\"hljs-keyword\">const</span> { can, cannot, build } = <span class=\"hljs-keyword\">new</span> AbilityBuilder(createMongoAbility);\n\n  <span class=\"hljs-keyword\">if</span> (hasPaidSubscription) {\n    can(<span class=\"hljs-string\">&#x27;create&#x27;</span>, <span class=\"hljs-string\">&#x27;BlogPost&#x27;</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    cannot(<span class=\"hljs-string\">&#x27;create&#x27;</span>, <span class=\"hljs-string\">&#x27;BlogPost&#x27;</span>).because(<span class=\"hljs-string\">&#x27;You have not paid for monthly subscription&#x27;</span>);\n  }\n\n  <span class=\"hljs-keyword\">return</span> build()\n}\n</code></pre>","headings":[{"id":"define-ability-function","title":"defineAbility function"},{"id":"define-ability-example","title":"defineAbility example"},{"id":"when-to-use-define-ability","title":"When to use defineAbility"},{"id":"why-define-ability-is-not-recommended","title":"Why defineAbility is not recommended"},{"id":"ability-builder-class","title":"AbilityBuilder class"},{"id":"ability-builder-example","title":"AbilityBuilder example"},{"id":"when-to-use-ability-builder","title":"When to use AbilityBuilder"},{"id":"json-objects","title":"JSON objects"},{"id":"json-objects-example","title":"JSON objects example"},{"id":"the-shape-of-raw-rule","title":"The shape of raw rule"},{"id":"when-to-use-json-objects","title":"When to use JSON objects"},{"id":"rules","title":"Rules"},{"id":"inverted-rules-order","title":"Inverted rules order"},{"id":"best-practice","title":"Best practice"}],"id":"guide/define-rules"}